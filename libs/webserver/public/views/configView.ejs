<%- include('./partialsHeaderView'); %>

<script>

	const token = '<%= token %>';
	const telegram = '<%= appData['telegram_enabled'] %>';
	const pairButtons = <%- '[' + appData.bots['pair_buttons'].map(button => `'${button}'`).join(',') + ']'; %>;
	const pairBlackList = <%- '[' + appData.bots['pair_blacklist'].map(pair => `'${pair}'`).join(',') + ']'; %>;

	function convertBoolean(param) {

		let paramBool;

		if (param) {

			paramBool = param.toLowerCase() === 'false' ? false : true;
		}

		return paramBool;
	}


	function genUUIDv4() {

		let dt = new Date().getTime();

		let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {

			let r = (dt + Math.random()*16)%16 | 0;
			dt = Math.floor(dt/16);
			return (c=='x' ? r :(r&0x3|0x8)).toString(16);
		});

		return uuid;
	}


	function generateApiKey() {

		$.confirm({

			title: false,
			boxWidth: '50%',
			useBootstrap: false,
			content: '<div style="font-size: 1.2rem; text-align: left;"><b>WARNING:</b> This will replace your existing API key after you update the configuration. Copy your key and store in a safe place since it will not be displayed again.</div>',
			buttons: {

						ok: {
								btnClass: 'btn-default',
								text: '<div style="color: #4aa602;">Generate API Key</div>',
								action: function () {

									const uuid = genUUIDv4();

									$('#apikey').val(uuid);
								}
							 },
						 cancel: {
									 btnClass: 'btn-default',
									 text: '<div style="color: #000000;">Cancel</div>',	
									 action: function () { }
								 }
					 }
		});
	}


	function submitForm() {

		let form = '#formConfig';
		let submitUrl = $(form).attr('action');

		if ($('#password').val() == '') {

			alertBox('Please enter your current password');

			return;
		}

		if ($('#passwordnew').val() != $('#passwordnew2').val()) {

			alertBox('Passwords do not match');

			return;
		}

		$('#spinner-overlay').fadeIn(100);

		$.ajax({
					type: 'POST',
					url: submitUrl,
					data: $(form).serialize(),
					dataType: 'json',
					success: function(data) {

						$('#spinner-overlay').fadeOut(100);

						if (!data.success) {

							alertBox(data.data, function() { window.location.reload(); });
						}
						else {

							alertBox(data.data, function() { window.location.reload(); });
						}

						$('#password').val('');
					},
					error: function(data) {

						// Some error in ajax call
						$('#spinner-overlay').fadeOut(100);

						alertBox('Error: ' + JSON.stringify(data));
					}
		});
	}


	$(document).ready(function() {

		$('[id*="toggle"]').simpleSwitch();

		$('#pairbuttons').select2({ tags: true, data: pairButtons });
		$('#pairbuttons').val(pairButtons);
		$('#pairbuttons').trigger('change');

		$('#pairblacklist').select2({ tags: true, data: pairBlackList });
		$('#pairblacklist').val(pairBlackList);
		$('#pairblacklist').trigger('change');

		if (convertBoolean(telegram)) {

			$('#toggleTelegram').click();
		}

		$('#configChangePass').on('click', function(e) {

			$('#configNewPass').toggle();
			$('#configConfirmPass').toggle();
		});

		$('#configApiKey').on('click', function(e) {

			generateApiKey();
		});

		$('#configApiToken').on('click', function(e) {

			$('#apitoken').toggle();
			$('#apitoken').html(window.atob(token));
		});

		$('#checkUpdates').on('click', async function() {

			let msg = 'Update Available.';

			try {

				const req = await fetch('/app-version');
				const { update_available } = await req.json();

				update_available ? alertBox(msg, function() {}) : alertBox(`No ${msg}`, function() {});

			} catch (err) {

				alertBox('Unable to check for update.', function() {});
			}
		})

		$('#submitButton').on('click', function(e) {

			e.preventDefault();

			submitForm();
		});

	});

</script>


<main>

	<div id="contentBox" style="max-width: 800px;">

		<div class="contentHeaderBox" style="text-align: center;">
			<b id="headerText" class="contentHeader">Configuration</b>
		</div>

		<form autocomplete="off" action="/config" method="POST" id="formConfig">

			<div style="padding-bottom: 5px;">
				<label for="password">Current Password
					<span class="toolTip">?<span class="toolTipText">
						This is the password used to login to the <%- appData.name %> web interface.
					</span></span>
				</label>
				<input type="password" name="password" id="password" class="form-field" style="width: 250px;" required> <span id="configChangePass" style="margin-left: 10px; cursor: pointer; color: var(--link-color);">Change</span>
			</div>

			<div style="padding-bottom: 5px; display: none;" id="configNewPass">
				<label for="passwordnew">New Password</label>
				<input type="password" name="passwordnew" id="passwordnew" class="form-field" style="width: 250px;">
			</div>

			<div style="padding-bottom: 5px; display: none;" id="configConfirmPass">
				<label for="passwordnew2">New Password Again</label>
				<input type="password" name="passwordnew2" id="passwordnew2" class="form-field" style="width: 250px;">
			</div>

			<div style="padding-bottom: 5px;">
				<label for="apikey">API Key <span style="font-size: 0.99rem;"><i>(Not displayed for security)</i></span>
					<span class="toolTip">?<span class="toolTipText">
						This is the key used for <%- appData.name %> API access
					</span></span>
				</label>
				<input name="apikey" id="apikey" class="form-field" style="width: 250px;" required> <span id="configApiKey" style="margin-left: 10px; cursor: pointer; color: var(--link-color);">Generate</span>
			</div>

			<div style="padding-bottom: 5px;">
				<label for="apitoken">Webhook API Token
					<span class="toolTip">?<span class="toolTipText">
						This is the token used for <%- appData.name %> webhook access
					</span></span>
					<span style="font-size: 0.99rem;"></span><span id="configApiToken" style="margin-left: 10px; cursor: pointer; color: var(--link-color);">Show</span>
				</label>
				<span id="apitoken" style="display: none; overflow-wrap: break-word;"></span>
			</div>

			<div style="padding-top: 10px; padding-bottom: 5px;">
				<label for="pairbuttons">Pair Buttons
					<span class="toolTip">?<span class="toolTipText">
						These are buttons used to automatically fill in all pairs after clicking on one when creating or updating bots.
					</span></span>
				</label>

				<select id="pairbuttons" name="pairbuttons" class="form-select-pair" style="width: 200px;" multiple="multiple"></select>
			</div>

			<div style="padding-top: 10px; padding-bottom: 5px;">
				<label for="pairblacklist">Pair Blacklist
					<span class="toolTip">?<span class="toolTipText">
						These are pairs that you do not want to trade. You can use full pairs such as BTC/USD or wildcards such as BTC/*.
					</span></span>
				</label>
				<select id="pairblacklist" name="pairblacklist" class="form-select-pair" style="width: 200px;" multiple="multiple"></select>
			</div>

			<div style="padding-top: 10px; padding-bottom: 5px;">
				<input id="toggleTelegram" name="telegram" type=checkbox> Telegram Notifications
			</div>

			<button style="margin-top: 20px" type="button" id="checkUpdates" class="btn" style="cursor: pointer;">
				Check for Updates
			</button>

			<div style="text-align: center; padding-top: 25px;">
				<button type="submit" id="submitButton" class="btn" style="cursor: pointer;">
					Update
				</button>
			</div>

		</form>
	</div>

</main>


<%- include('./partialsFooterView'); %>
