<%- include('./partialsHeaderView'); %>

<script>

	const token = '<%= token %>';
	const telegramEnabled = '<%= appData['telegram_enabled_config'] %>';
	const signals3CQSEnabled = '<%= appData['signals_3cqs_enabled'] %>';
	const configMode = '<%= appData['config_mode'] %>';
	const pairButtons = <%- '[' + appData.bots['pair_buttons'].map(button => `'${button}'`).join(',') + ']'; %>;
	const pairBlackList = <%- '[' + appData.bots['pair_blacklist'].map(pair => `'${pair}'`).join(',') + ']'; %>;

	function convertBoolean(param) {

		let paramBool;

		if (param) {

			paramBool = param.toLowerCase() === 'false' ? false : true;
		}

		return paramBool;
	}


	function genUUIDv4() {

		let dt = new Date().getTime();

		let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {

			let r = (dt + Math.random()*16)%16 | 0;
			dt = Math.floor(dt/16);
			return (c=='x' ? r :(r&0x3|0x8)).toString(16);
		});

		return uuid;
	}


	function generateApiKey() {

		$.confirm({

			title: false,
			boxWidth: '50%',
			useBootstrap: false,
			content: '<div style="font-size: 1.2rem; text-align: left;"><b>WARNING:</b> This will replace your existing API key after you update the configuration. Copy your key and store in a safe place since it will not be displayed again.</div>',
			buttons: {

						ok: {
								btnClass: 'btn-default',
								text: '<div style="color: #4aa602;">Generate API Key</div>',
								action: function () {

									const uuid = genUUIDv4();

									$('#apikey').val(uuid);
								}
							 },
						 cancel: {
									 btnClass: 'btn-default',
									 text: '<div style="color: #000000;">Cancel</div>',	
									 action: function () { }
								 }
					 }
		});
	}


	function submitForm() {

		let form = '#formConfig';
		let submitUrl = $(form).attr('action');

		if ($('#password').val() == '') {

			alertBox('Please enter your current password');

			return;
		}

		if ($('#passwordnew').val() != $('#passwordnew2').val()) {

			alertBox('Passwords do not match');

			return;
		}

		$('#spinner-overlay').fadeIn(100);

		$.ajax({
					type: 'POST',
					url: submitUrl,
					data: $(form).serialize(),
					dataType: 'json',
					success: function(data) {

						$('#spinner-overlay').fadeOut(100);

						if (!data.success) {

							alertBox(data.data, function() { window.location.reload(); });
						}
						else {

							alertBox(data.data, function() { window.location.reload(); });
						}

						$('#password').val('');
					},
					error: function(data) {

						// Some error in ajax call
						$('#spinner-overlay').fadeOut(100);

						alertBox('Error: ' + JSON.stringify(data));
					}
		});
	}


	$(document).ready(function() {

		$('[id*="toggle"]').simpleSwitch();
		$('#msgBox').empty();

		if (convertBoolean(configMode)) {

			$('#configMongoDb').toggle();

			let msgBox = '';

			msgBox += '<div style="display: block;"><%= appData['name'] %> is currently in configuration mode</div>';

			$('#msgBox').css({
				'padding': '10px',
				'margin-bottom': '30px',
				'border-radius': '5px',
				'background-color': 'yellow',
				'color': '#000000',
				'border': '1px solid rgba(0, 0, 0, 0.2)',
				'box-shadow': '0 0 10px rgba(0, 0, 0, 0.1)'
			});

			$('#msgBox').html('<div style="display: block; font-weight: bold;">' + msgBox + '</div>');
		}

		$('#pairbuttons').select2({ tags: true, data: pairButtons });
		$('#pairbuttons').val(pairButtons);
		$('#pairbuttons').trigger('change');

		$('#pairblacklist').select2({ tags: true, data: pairBlackList });
		$('#pairblacklist').val(pairBlackList);
		$('#pairblacklist').trigger('change');

		if (convertBoolean(signals3CQSEnabled)) {

			$('#toggleSignals3CQS').click();
		}

		if (convertBoolean(telegramEnabled)) {

			$('#toggleTelegram').click();
		}

		$('#configChangePass').on('click', function(e) {

			$('#configNewPass').toggle();
			$('#configConfirmPass').toggle();
		});

		$('#configApiKey').on('click', function(e) {

			generateApiKey();
		});

		$('#configApiToken').on('click', function(e) {

			$('#apitoken').toggle();
			$('#apitoken').html(window.atob(token));
		});

		$('#checkUpdates').on('click', async function() {

			let msg = 'Update Available.';

			try {

				const req = await fetch('/app-version');
				const { update_available } = await req.json();

				update_available ? alertBox(msg, function() {}) : alertBox(`No ${msg}`, function() {});

			} catch (err) {

				alertBox('Unable to check for update.', function() {});
			}
		})

		$('#submitButton').on('click', function(e) {

			e.preventDefault();

			submitForm();
		});

	});

</script>


<main>

	<div id="contentBox" style="max-width: 800px;">

		<div class="contentHeaderBox" style="text-align: center;">
			<b id="headerText" class="contentHeader">Configuration</b>
		</div>

		<span id="msgBox" style="position: relative; display: flex; justify-content: center;"></span>

		<form autocomplete="off" action="./config" method="POST" id="formConfig">

			<div style="padding-bottom: 5px;">
				<label for="password"><b>Current Password</b>
					<span class="toolTip">?<span class="toolTipText">
						This is the password used to login to the <%- appData.name %> web interface.
					</span></span>
				</label>
				<input type="password" name="password" id="password" class="form-field" style="width: 250px;" required> <span id="configChangePass" style="margin-left: 10px; cursor: pointer; color: var(--link-color);">Change</span>
			</div>

			<div style="padding-bottom: 5px; display: none;" id="configNewPass">
				<label for="passwordnew"><b>New Password</b></label>
				<input type="password" name="passwordnew" id="passwordnew" class="form-field" style="width: 250px;">
			</div>

			<div style="padding-bottom: 5px; display: none;" id="configConfirmPass">
				<label for="passwordnew2"><b>New Password Again</b></label>
				<input type="password" name="passwordnew2" id="passwordnew2" class="form-field" style="width: 250px;">
			</div>

			<div style="padding-bottom: 5px; display: none;" id="configMongoDb">
				<label for="mongodburl"><b>Mongo DB URL</b>
					<span class="toolTip">?<span class="toolTipText">
						This is the Mongo Database URL used for <%- appData.name %> data storage.
					</span></span>
				</label>
				<input name="mongodburl" id="mongodburl" value="<%- appData.mongo_db_url %>" class="form-field" style="width: 250px;" required>
			</div>

			<div style="padding-bottom: 5px;">
				<label for="apikey"><b>API Key</b> <span style="font-size: 0.99rem;"><i>(Not displayed for security)</i></span>
					<span class="toolTip">?<span class="toolTipText">
						This is the key used for <%- appData.name %> API access
					</span></span>
				</label>
				<input name="apikey" id="apikey" class="form-field" style="width: 250px;" required> <span id="configApiKey" style="margin-left: 10px; cursor: pointer; color: var(--link-color);">Generate</span>
			</div>

			<div style="padding-bottom: 5px;">
				<label for="apitoken"><b>Webhook API Token</b>
					<span class="toolTip">?<span class="toolTipText">
						This is the token used for <%- appData.name %> webhook access
					</span></span>
					<span style="font-size: 0.99rem;"></span><span id="configApiToken" style="margin-left: 10px; cursor: pointer; color: var(--link-color);">Show</span>
				</label>
				<span id="apitoken" style="display: none; overflow-wrap: break-word;"></span>
			</div>

			<div style="padding-top: 10px; padding-bottom: 5px;">
				<label for="pairbuttons"><b>Pair Buttons</b>
					<span class="toolTip">?<span class="toolTipText">
						These are buttons used to automatically fill in all pairs after clicking on one when creating or updating bots.
					</span></span>
				</label>

				<select id="pairbuttons" name="pairbuttons" class="form-select-pair" style="width: 200px;" multiple="multiple"></select>
			</div>

			<div style="padding-top: 10px; padding-bottom: 5px;">
				<label for="pairblacklist"><b>Pair Blacklist</b>
					<span class="toolTip">?<span class="toolTipText">
						These are pairs that you do not want to trade. You can use full pairs such as BTC/USD or wildcards such as BTC/*.
					</span></span>
				</label>
				<select id="pairblacklist" name="pairblacklist" class="form-select-pair" style="width: 200px;" multiple="multiple"></select>
			</div>


			<div style="padding-top: 10px; padding-bottom: 5px;">

				<b>3CQS Signals</b>
				<table id="botsCreate" style="margin-top: 5px;" cellpadding=0 cellspacing=0>
				
				<tr>
					<td>
						<label for="password">API Key:
							<span class="toolTip">?<span class="toolTipText">
								This is your API key for accessing and using 3CQS signals. Please note that you may encounter repeated error messages if the key is invalid or if too many connection attempts are made.
							</span></span>
						</label>
					</td>

					<td>
					<input type="password" name="signals_3cqs_api_key" id="signals_3cqs_api_key" class="form-field" style="width: 250px; margin-bottom: 5px;" value="<%= services['signals']['3CQS']['api_key'] %>">
					<br>
					Register at <a href="https:///www.3cqs.com" target=_blank>3CQS.com</a> to get your API key
					</td>
				</tr>

				<tr>
					<td>Enabled:</td>

					<td>
						<input id="toggleSignals3CQS" name="signals_3cqs_enabled" type=checkbox>
					</td>
				</tr>

				</table>
			</div>


			<div style="padding-top: 10px; padding-bottom: 5px;">

				<b>Telegram Settings</b>
				<table id="botsCreate" style="margin-top: 5px;" cellpadding=0 cellspacing=0>
				
				<tr>
					<td>
						<label for="password">Token ID:
							<span class="toolTip">?<span class="toolTipText">
								This is the token ID created using Telegram's Bot Father
							</span></span>
						</label>
					</td>

					<td>
					<input type="password" name="telegram_token_id" id="telegram_token_id" class="form-field" style="width: 250px;" value="<%= services['telegram']['token_id'] %>">
					</td>
				</tr>

				<tr>
					<td>
						<label for="password">User ID:
							<span class="toolTip">?<span class="toolTipText">
								This is the Telegram user ID notifications will be sent to
							</span></span>
						</label>
					</td>

					<td>
					<input name="telegram_user_id" id="telegram_user_id" class="form-field" style="width: 250px;" value="<%= services['telegram']['notify_user_id'] %>">
					</td>
				</tr>

				<tr>
					<td>Enabled:</td>

					<td>
						<input id="toggleTelegram" name="telegram_enabled" type=checkbox>
					</td>
				</tr>

				</table>
			</div>

			<button style="margin-top: 20px" type="button" id="checkUpdates" class="btn" style="cursor: pointer;">
				Check for Updates
			</button>

			<div style="text-align: center; padding-top: 25px;">
				<button type="submit" id="submitButton" class="btn" style="cursor: pointer;">
					Update
				</button>
			</div>

		</form>
	</div>

</main>


<%- include('./partialsFooterView'); %>
