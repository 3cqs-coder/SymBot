<script>

let socketGlobal;
const removeNotifsSec = 12;

function removeNotificationDisplay(id) {

	$('#' + id).fadeOut(1000, function() {

		$(this).remove();
	});
}


$(document).ready(function() {

	const maxRows = 10;
	const room = 'notifications';
	const modalNotifyId = '#modalNotifications';

	let wsTranports = ['websocket', 'polling'];

	const webSocketPath = basePath + '<%- appData['web_socket_path'] %>';

	let wslastPart = webSocketPath.split('/').pop();

	if (wslastPart !== 'ws') {

		// Use polling only to avoid potential WebSocket conflicts for instances
		wsTranports = wsTranports.filter(transport => transport !== 'websocket');
	}

	try {

		dataTracker = JSON.parse(localStorage.getItem('dataTracker'));

		// Reset alert if notification flag is set
		if (dataTracker['notifications'] != undefined && dataTracker['notifications'] != null) {

			$('.notificationButton').addClass('notificationButtonAlert');
		}
	}
	catch (e) {

	}

	const socket = io('/', {

		query: {
			'room': room
		},
		extraHeaders: {
			'user-agent': '<%- appData.name %>/<%- appData.version %>'
		},
		transports: wsTranports,
		path: webSocketPath,
		reconnection: true,
		reconnectionDelay: 10000
	});

	socketGlobal = socket;

	socket.on('connect', (data) => {

		socket.emit('joinRooms', {
			rooms: [room]
		});
	});

	socket.on('connect_error', (data) => {});

	socket.on('connect_failed', (data) => {});

	socket.on('error', (data) => {});

	socket.on('disconnect', (data) => {});

	// Show notification history
	socket.on('history', (data) => {

		let content = '';

		if (data.length > 0) {

			let typesObj = {};

			let dataArr = sortByKey(data, 'date');

			dataArr = dataArr.reverse();

			for (let i = 0; i < dataArr.length; i++) {

				let msg = dataArr[i]['message'];
				let typeMsg = dataArr[i]['type'];
				let dateMsg = dataArr[i]['date'];

				if (typeMsg != undefined && typeMsg != null && typeMsg != '') {

					typesObj[typeMsg] = 1;
				}

				content += '<div class="notificationsRow" data-type="' + typeMsg + '">' + msg + '<div class="notificationsItem">' + dateConvertLocal(dateMsg) + '</div></div>';
			}

			typesObj = sortHashAsc(typesObj);

			for (let typeMsg in typesObj) {

				$('#notificationsList').append('<option>' + typeMsg);
			}
		}

		//content = '<div style="max-width: 800px;">' + content + '</div>';
		$(modalNotifyId).html(content);
	});

	socket.on('data', (data) => {

		if (data.type === 'notification') {

			processNotificationData(data.message);
		}
	});

	$(document).on('click', '[id*="notifs-"]', function() {

		let id = $(this).attr('id');

		removeNotificationDisplay(id);
	});

	$(document).on('change', '#hideNotifs', function() {

		if ($('#hideNotifs').prop('checked')) {

			dataTracker['hideNotifs'] = true;
		}
		else {

			delete dataTracker['hideNotifs'];
		}

		updateDataTracker();
	});

	$(document).on('change', '#notificationsList', function() {

		let optionSelected = $('option:selected', this).val();

		$('.notificationsRow').show();

		if (optionSelected != '') {

			$('.notificationsRow').hide();
			$('.notificationsRow[data-type="' + optionSelected + '"]').show();
		}
	});

	$('#notifications').on('click', function() {

		let showModal = true;

		// Remove alert from tracker
		delete dataTracker['notifications'];

		updateDataTracker();

		$('.notificationButton').removeClass('notificationButtonAlert');

		try {

			if ($(modalNotifyId).is(':visible')) {

				$(modalNotifyId).dialog('close');

				showModal = false;
			}
		} catch (e) {

			showModal = true;
		}

		if (showModal) {

			let titleExtra = '<span style="padding-left: 10px;">';

			titleExtra += '<select id="notificationsList"><option value="">Show All</select>';
			titleExtra += ' &nbsp; <b>Hide</b> <input id="hideNotifs" name="hideNotifs" type=checkbox class="form-field">';

			titleExtra += '</span>';

			let content = '<div class="spinner-dynamic-container"><div class="spinner-dynamic"></div></div>';

			openModal('notificationsView', modalNotifyId, 'Notification Center History ' + titleExtra, content);

			$('#hideNotifs').simpleSwitch();
			$('#hideNotifs').prop('checked', false);

			if (dataTracker['hideNotifs']) {

				$('#hideNotifs').click();
			}

			socket.emit('notifications_history', {});
		}
	});
});


function processNotificationData(data) {

	let id = 'notifs-' + Math.random().toString(36).slice(2, 10) + Math.floor(1000 + Math.random() * 9000);

	let msg = '<div id="' + id + '" class="notificationsRow">' + data + '</div>';

	if (dataTracker['notifications'] == undefined || dataTracker['notifications'] == null) {

		dataTracker['notifications'] = {};
	}

	dataTracker['notifications']['date'] = new Date();
	dataTracker['notifications']['alert'] = true;

	updateDataTracker();

	$('.notificationButton').addClass('notificationButtonAlert');

	// Don't display if notifications are hidden
	if (dataTracker['hideNotifs']) {

		return;
	}

	$('#notificationsBox').append(msg);

	$('#' + id).hide();
	$('#' + id).fadeIn(500);

	let currentRows = $('.notificationsRow').length;

	setTimeout(() => {

		removeNotificationDisplay(id);

	}, (removeNotifsSec * 1000));

	if (currentRows > maxRows) {

		//$('.notificationsRow').slice((maxRows - currentRows)).remove();
	}
}

</script>