<script>

$(document).ready(function() {

	const maxRows = 10;
	const removeSec = 12;
	const modalNotifyId = '#modalNotifications';

	try {

		dataTracker = JSON.parse(localStorage.getItem('dataTracker'));

		// Reset alert if notification flag is set
		if (dataTracker['notifications'] != undefined && dataTracker['notifications'] != null) {

			$('.notificationButton').addClass('notificationButtonAlert');
		}
	}
	catch(e) {

	}

	const socket = io('/', {

		query: {
			'room': 'notifications'
		},
		extraHeaders: {
			'user-agent': '<%- appData.name %>/<%- appData.version %>'
		},
		transports: ['websocket', 'polling'],
		path: '/ws',
		reconnection: true,
		reconnectionDelay: 10000
	});

	socket.on('connect', (data) => {});

	socket.on('connect_error', (data) => {});

	socket.on('connect_failed', (data) => {});

	socket.on('error', (data) => {});

	socket.on('disconnect', (data) => {});

	// Show notification history
	socket.on('history', (data) => {

		let content = '';

		if (data.length > 0) {

			let dataArr = sortByKey(data, 'date');

			dataArr = dataArr.reverse();

			for (let i = 0; i < dataArr.length; i++) {

				let msg = dataArr[i]['message'];
				let dateMsg = dataArr[i]['date'];

				content += '<div class="notificationsRow">' + msg + '<div style="margin-top: 10px; font-size: 0.85rem;">' + dateConvertLocal(dateMsg) + '</div></div>';
			}
		}

		//content = '<div style="max-width: 800px;">' + content + '</div>';
		$(modalNotifyId).html(content);
	});

	socket.on('data', (data) => {

		let id = 'notifs' + Math.random().toString(36).slice(2, 10) + Math.floor(1000 + Math.random() * 9000);

		let msg = '<div id="' + id + '" class="notificationsRow">' + data + '</div>';

		if (dataTracker['notifications'] == undefined || dataTracker['notifications'] == null) {

			dataTracker['notifications'] = {};
		}

		dataTracker['notifications']['date'] = new Date();
		dataTracker['notifications']['alert'] = true;

		updateDataTracker();

		$('.notificationButton').addClass('notificationButtonAlert');

		$('#notificationsBox').append(msg);

		$('#' + id).hide();
		$('#' + id).fadeIn(500);

		let currentRows = $('.notificationsRow').length;

		setTimeout(() => {

			$('#' + id).fadeOut(1000, function() {

				$(this).remove();
			});

		}, (removeSec * 1000));

		if (currentRows > maxRows) {

			//$('.notificationsRow').slice((maxRows - currentRows)).remove();
		}
	});


	$('#notifications').on('click', function() {

		let showModal = true;

		// Remove alert from tracker
		delete dataTracker['notifications'];

		updateDataTracker();

		$('.notificationButton').removeClass('notificationButtonAlert');

		try {

			if ($(modalNotifyId).is(':visible')) {

				$(modalNotifyId).dialog('close');

				showModal = false;
			}
		}
		catch (e) {

			showModal = true;
		}

		if (showModal) {

			let content = '<div class="spinner-dynamic-container"><div class="spinner-dynamic"></div></div>';

			openModal('notificationsView', modalNotifyId, 'Notification Center History', content);

			socket.emit('notifications_history', {});
		}
	});

});

</script>
