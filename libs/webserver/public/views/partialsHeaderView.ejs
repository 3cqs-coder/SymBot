<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="UTF-8" />
	<meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />
	<meta http-equiv="Pragma" content="no-cache" />
	<meta http-equiv="Expires" content="0" />
	<meta http-equiv="X-UA-Compatible" content="IE=edge" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />

	<title><%- appData.name %> <%- appData.version %></title>

	<link rel="stylesheet" href="/css/vendor/jquery-ui/jquery-ui.min.css" />
	<link rel="stylesheet" href="/css/vendor/jquery-confirm/jquery-confirm-3.3.2.min.css" />
	<link rel="stylesheet" href="/css/vendor/select2/select2.min.css" />
	<link rel="stylesheet" href="/css/vendor/simple-switch/simple-switch.css" />
	<link rel="stylesheet" href="/css/vendor/tablesorter/filter.formatter.min.css" />
	<link rel="stylesheet" href="/css/style.css" />

	<link href="https://fonts.googleapis.com/css?family=Heebo:400,600,300" rel="stylesheet" type="text/css">

	<script src="/js/vendor/socket.io/socket.io.min.js"></script>
	<script src="/js/vendor/jquery/jquery-3.6.3.min.js"></script>
	<script src="/js/vendor/jquery-ui/jquery-ui.min.js"></script>
	<script src="/js/vendor/jquery-confirm/jquery-confirm-3.3.2.min.js"></script>
	<script src="/js/vendor/select2/select2.full.min.js"></script>
	<script src="/js/vendor/simple-switch/jquery.simpleswitch.min.js"></script>

	<script src="/js/vendor/tablesorter/jquery.tablesorter.combined.min.js"></script>
	<script src="/js/vendor/tablesorter/parsers/parser-duration.min.js"></script>
	<script src="/js/vendor/tablesorter/parsers/parser-named-numbers.min.js"></script>
	<script src="/js/vendor/tablesorter/widgets/widget-columnSelector.min.js"></script>
	<script src="/js/vendor/tablesorter/widgets/widget-filter-formatter-jui.min.js"></script>

	<script type="text/javascript" src="https://s3.tradingview.com/tv.js"></script>

	<script>

	let dataTracker = {};
	let modalTracker = {};
	let pairBTC = 'BTC/USD';
	let exchangeBTC = 'bitstamp';

	$(document).ready(function() {

		const modalTvId = '#modalTvSettings';

		dataTracker = getDataTracker();

		// Set theme / mode
		changeMode(dataTracker['mode']);

		if (dataTracker['tradingView'] == undefined || dataTracker['tradingView'] == null) {

			dataTracker['tradingView'] = {};
			updateDataTracker();
		}

		getTradingViewData();

		// Allow html in modal title
		$.widget('ui.dialog', $.extend({}, $.ui.dialog.prototype, {

			_title: function(title) {

				if (!this.options.title) {

					title.html('&#160;');
				}
				else {

					title.html(this.options.title);
				}
			}
		}));

		$('#mode').on('click', function() {

			let mode = dataTracker['mode'];

			if (mode != undefined && mode != null && mode == 'dark') {

				changeMode('light');
			}
			else {

				changeMode('dark');
			}
		});

		$(document).on('click', '#tradingViewSettings', function() {

			openModal('tvSettingsView', modalTvId, 'TradingView Settings');
		});

		$('#logo').on('click', function() {

			window.location.href = '/';
		});

		$('#btcPrice').on('click', function() {

			showTradingView('homeView', 'modal', false, false, pairBTC, exchangeBTC);
		});

		getPriceBTC();
	});


	function changeMode(mode) {

		if (mode != undefined && mode != null && mode == 'dark') {

			$('#mode').html('&#127769;');
			$('#mode').css('font-size', '1.4rem');
			$('body').attr('data-theme', 'dark');
		}
		else {

			$('#mode').html('&#9788;');
			$('#mode').css('font-size', '1.7rem');
			$('body').removeAttr('data-theme');
		}

		dataTracker['mode'] = mode;

		updateDataTracker();
	}


	function getTradingViewData() {

		fetch('/data/tradingViewData.json')
		.then(response => response.json())
		.then(function(json) {

			populateTradingViewData(json);
		});
	}


	function populateTradingViewData(data) {

		let studies = data['studies'];
		let intervals = data['intervals'];
		let barStyles = data['bar_styles'];

		if (Object.keys(dataTracker['tradingView']).length == 0) {

			dataTracker['tradingView']['inverval'] = intervals[0].split('-')[0];
			dataTracker['tradingView']['bar_style'] = barStyles[8].split('-')[0];
			dataTracker['tradingView']['studies'] = {};
		}

		let content = '<div><br><i>Changes will take affect the next time a chart is loaded</i><br><br>';

		content += '<b>Time Interval:</b> <select id="tvInterval">';

		for (let i = 0; i < intervals.length; i++) {

			let words = intervals[i].split('-');

			content += '<option value="' + words[0] + '">' + words[1] + '</option>';
		}

		content += '</select><br><br>';

		content += '<b>Bar Style:</b> <select id="tvBarStyle">';

		for (let i = 0; i < barStyles.length; i++) {

			let words = barStyles[i].split('-');

			content += '<option value="' + words[0] + '">' + words[1] + '</option>';
		}

		content += '</select><br><br>';

		content += '<div id="tvStudiesBoxes">';
		content += '<b>Choose Indicators:</b>';
		content += '<br><br>';

		$('#modalTvSettings').empty();

		let tvStudiesSort = sortByKey(studies, '_name');

		for (let i = 0; i < tvStudiesSort.length; i++) {

			let checked = '';

			let tvId = tvStudiesSort[i]['id'];
			let tvName = tvStudiesSort[i]['_name'];
 
			let tvIdHash = numToBase26(hashCode(tvId));

			if (dataTracker['tradingView']['studies'][tvIdHash] != undefined && dataTracker['tradingView']['studies'][tvIdHash] != null) {

				checked = ' CHECKED';
			}

			content += '<input type=checkbox id="' + tvIdHash + '"' + checked + '> ' + tvName + '<br>';
		}

		content += '</div></div>';

		$('#modalTvSettings').html(content);

		if (dataTracker['tradingView']['interval'] != undefined && dataTracker['tradingView']['interval'] != null && dataTracker['tradingView']['interval'] != '') {

			$('#tvInterval option[value="' + dataTracker['tradingView']['interval'] + '"]').attr('selected', true);	
		}

		if (dataTracker['tradingView']['bar_style'] != undefined && dataTracker['tradingView']['bar_style'] != null && dataTracker['tradingView']['bar_style'] != '') {

			$('#tvBarStyle option[value="' + dataTracker['tradingView']['bar_style'] + '"]').attr('selected', true);	
		}

		$(document).on('change', '#tvInterval', function() {

			dataTracker['tradingView']['interval'] = $(this).val();

			updateDataTracker();
		});

		$(document).on('change', '#tvBarStyle', function() {

			dataTracker['tradingView']['bar_style'] = $(this).val();

			updateDataTracker();
		});


		$(document).on('change', '#tvStudiesBoxes input[type=checkbox]', function() {

			let tvStudiesSelected = {};

			dataTracker['tradingView']['studies'] = {};

			$('#tvStudiesBoxes input[type=checkbox]').each(function() {

				let id = $(this).attr('id');

				if ($(this).is(':checked') == true) {

					tvStudiesSelected[id] = 1;
				}
			});

			dataTracker['tradingView']['studies'] = tvStudiesSelected;

			updateDataTracker();
		});
	}


	function dateConvertLocal(date) {

		date = new Date(date);

		let datePart = date.getFullYear() + '-' + ('00' + (date.getMonth() + 1)).slice(-2) + '-' + ('00' + date.getDate()).slice(-2);
		let timePart = ('00' + date.getHours()).slice(-2) + ':' + ('00' + date.getMinutes()).slice(-2) + ':' + ('00' + date.getSeconds()).slice(-2);

		let hourTemp = parseInt(timePart.split(':')[0]) % 12;

		if (hourTemp < 10) {

			hourTemp = '0' + hourTemp;
		}

		let timePartAmPm = (hourTemp == 0 ? '12' : hourTemp) + ':' + timePart.split(':')[1] + ' ' + (parseInt(parseInt(timePart.split(':')[0]) / 12) < 1 ? 'AM' : 'PM');

		let dateFull = datePart + ' ' + timePartAmPm;

		return dateFull;
	}


	function timeDiff(dateStart, dateEnd) {
 
		let diff = Math.abs(dateEnd - dateStart) / 1000;

		let diffString = '';

		let days = Math.floor(diff / 86400);
		diff -= days * 86400;

		let hours = Math.floor(diff / 3600) % 24;
		diff -= hours * 3600;

		let minutes = Math.floor(diff / 60) % 60;
		diff -= minutes * 60;

		let seconds = Math.floor(diff / 1) % 60;
		diff -= seconds * 60;

		if (days > 0) {
			
			diffString += days === 1 ? `${days}d` : `${days}d`;
		}

		if (hours > 0) {

			diffString += hours === 1 ? ` ${hours}h` : ` ${hours}h`;
		}

		if (minutes > 0) {

			diffString += minutes === 1 ? ` ${minutes}m` : ` ${minutes}m`;
		}

		if (seconds > 0) {

			diffString += seconds === 1 ? ` ${seconds}s` : ` ${seconds}s`;
		}

		diffString = diffString.trim();

		return diffString;
	}


	function sortHashAsc(hash) {

		return Object.keys(hash)
		.sort()
		.reduce((acc, key) => ({ ...acc, [key]: hash[key] }), {});
	}


	function sortHashDesc(hash) {

		return Object.keys(hash)
		.sort()
		.reverse()
		.reduce((acc, key) => ({ ...acc, [key]: hash[key] }), {});
	}


	function sortByKey(array, key) {

		return array.sort(function(a, b) {
			let x = a[key];
			var y = b[key];
			return x < y ? -1 : x > y ? 1 : 0;
		});
	}


	function hashCode(str) {

		let h;

		for (let i = 0; i < str.length; i++) {

			h = (Math.imul(31, h) + str.charCodeAt(i)) | 0;
		}

		return Math.abs(h);
	}


	function numToBase26(num) {

		num = parseInt(num, 10);

		let str = num.toString(26).toUpperCase();

		return str;
	}


	function resizeBotsDeals(px) {

		let offSetBottom = -200;

		let p = $('.botsDealsBox').first();
		let positionTop = p.position().top;

		let contentHeaderHeight = $('.contentHeaderBox').height();

		contentHeaderHeight = contentHeaderHeight || 0;

		let pixels = offSetBottom - contentHeaderHeight;

		if (px != undefined && px != null) {

			pixels = px;
		}

		$('.botsDealsBox').height(($(window).height() + pixels));
	}


	function stripHtml(str) {

		str = str.toString();

		str = str.replace(/(<([^>]+)>)/gi, '');

		return str;
	}


	function alertBox(msg, func) {

		$.alert({
					title: false,
					boxWidth: '50%',
					useBootstrap: false,
					content: '<div style="font-size: 1.2rem; text-align: left;">' + msg + '</div>',
					buttons: {
								ok: {
										btnClass: 'btn-default',
										text: 'Ok',
										action: function() {

											if (func != undefined && func != null) {

												func();
											}
										}
									}
							 }
		});
	}


	function openModal(modalId, divModal, title, content, divAppend) {

		modalTracker[modalId] = $(divModal).dialog({

			dialogClass: 'fixed-dialog',
			create: function (event, ui) {

				$('.ui-dialog').css('border-radius', '5px');
			},
			show: {
					effect: 'scale',
					duration: 250
			},
			hide: {
					effect: 'scale',
					duration: 250
			},
			title: title,
			autoOpen: false,
			draggable: false,
			width: '90%',
			height: ($(window).height() - 200),
			dialogClass: 'dialogClass',
			modal: true,
			appendTo: divAppend,
			open: function (event, ui) {

				if (content != undefined && content != null && content != '') {

					$(divModal).html(content);
				}
			},
			close: function (event, ui) {
			}
		});

		$(divModal).dialog('open');
	}


	function getDataTracker() {

		let data;

		try {

			data = JSON.parse(localStorage.getItem('dataTracker'));
		}
		catch(e) {

		}

		if (data == undefined || data == null || data == '') {
			
			data = {};
		}

		return data;
	}


	function updateDataTracker() {

		localStorage.setItem('dataTracker', JSON.stringify(dataTracker));
	}


	async function getMarkets(pair, exchange) {

		let res;

		try {

			res = await $.ajax({
		
						type: 'GET',
						url: '/api/markets',
						data: { 'exchange': exchange, 'pair': pair },
						dataType: 'json',
						success: function(data) {

						},
						error: function(data) {

							// Some error in ajax call
						}
			});
		}
		catch(e) {
		}
		
		return res;
	}


	async function getPriceBTC() {

		let sec = 30;

		let price;
		let diffSec;

		if (dataTracker['btc']) {

			let dateLast = dataTracker['btc']['date'];
			price = dataTracker['btc']['price'];

			diffSec = (new Date().getTime() - new Date(dateLast).getTime()) / 1000;
		}

		// Get price only if last check exceeds n seconds
		if (!dataTracker['btc'] || diffSec > (sec - 10)) {

			let data = await getMarkets(pairBTC, exchangeBTC);

			if (data) {

				let date = data.date;
				let success = data.success;

				if (success) {

					price = data.data.last;

					if (price == undefined || price == null) {

						price = data.data.price;
					}

					if (dataTracker == undefined || dataTracker == null) {
					
						dataTracker = {};
					}

					if (dataTracker['btc'] == undefined || dataTracker['btc'] == null) {

						dataTracker['btc'] = {};
					}

					dataTracker['btc']['date'] = new Date();
					dataTracker['btc']['price'] = price;

					updateDataTracker();
				}
			}
			else {

				price = 0;
			}
		}

		$('#btcPrice').html('BTC: $' + price);

		setTimeout(() => { getPriceBTC(); }, (sec * 1000));
	}


	function showOrderHistory(modalId, dealId, active, dealOrders) {

		let orders = JSON.parse(JSON.stringify(dealOrders)).reverse();
		let ordersFilled = orders.filter(item => item.filled);

		let count = 1;
		//let count = ordersFilled.length;

		let table = $('<table id="ordersTable" style="width: 100%;" cellspacing=0 cellpadding=0>');

		let row = $('<tr />');
		row.append($('<th></th> <th>Date</th> <th>Price</th> <th>Qty</th> <th>Amount</th> <th>Sum(Qty)</th> <th>Sum($)</th>'));
		table.append(row);

		for (let i = orders.length - 1; i >= 0; i--) {

			let data = orders[i];

			let dateFilled = '';
			let row = $('<tr />');

			let style = 'padding: 3px;';

			if (data['filled']) {

				dateFilled = dateConvertLocal(data['dateFilled']);
			}
			else {

				if (active) {

					dateFilled = 'Waiting';
				}
			}

			if (data['manual']) {

				style += ' color: #e38302;';
			}

			row.append($('<td style="' + style + '">' + count + '.</td>'));
			row.append($('<td>' + dateFilled + '</td>'));
			row.append($('<td>$' + data['price'] + '</td>'));
			row.append($('<td>' + data['qty'] + '</td>'));
			row.append($('<td>$' + data['amount'] + '</td>'));
			row.append($('<td>' + data['qtySum'] + '</td>'));
			row.append($('<td>$' + data['sum'] + '</td>'));

			if (dateFilled != '') {

				table.append(row);
			}

			count++;
		}

		openModal(modalId, '#modal', 'Order History ' + dealId, table);
	}


	function showTradingView(modalId, divId, jquery, script, pair, exchange) {

		if (exchange == undefined || exchange == null || exchange == '') {

			return;
		}

		exchange = exchange.toUpperCase();

		if (exchange.startsWith('COINBASE')) {

			exchange = 'COINBASE';
		}

		let url = '/api/tradingview?jquery=' + jquery + '&script=' + script + '&exchange=' + exchange + '&pair=' + pair.replace(/[^a-z0-9]/gi, '_');

		openModal(modalId, '#' + divId, '<span id="tradingViewSettings">&#9881;</span> TradingView Chart ' + pair, 'Loading...');

		$('#' + divId).load(url);
	}

	</script>

	<%- include('./partialsSocketView'); %>

</head>

<body>

<div id="headerBox"> 

	<div id="btcPrice"></div>

	<div style="position: absolute; left: 0; right: 0; top: 50%; transform: translateY(-50%);">
		<img id="logo" src="/images/SymBot-Logo.png" style="width: auto; height: 55px; vertical-align: middle;" />
	</div>

	<div class="headerButtons">
		<div id="mode" class="modeButton"></div>
		<div id="notifications" class="notificationButton">&#128276;</div>
	</div>
</div>

<div id="spinner-overlay">
	<div class="spinner-container"><span class="spinner"></span></div>
</div>

<center>
	<div id="modal"></div>
	<div id="modalDealEdit"></div>
	<div id="modalNotifications"></div>
	<div id="modalTvSettings"></div>
</center>

<div id="notificationsBox"></div>
