<%- include('./partialsHeaderView'); %>

<script>

let bufferLogs = [];
let countdownTimerLogs;

	$(document).ready(function() {

		if (socketGlobal) {

			const socket = socketGlobal;

			socket.on('connect', (data) => {

				socket.emit('joinRooms', {

					'rooms': ['notifications', 'logs']
				});
			});

            socket.on('data', (data) => {

                // Realtime logs
                if (data.type === 'log') {

                    if ($('#simple-switch').parent().hasClass('checked')) {

                        displayLog(data.message);
                    }
                    else {

                        bufferLogs.push(data.message);
                    }
                }
            });

			window.addEventListener('beforeunload', () => {

				socket.emit('leaveRoom', 'logs');
			});
		}

		$(window).resize(function() {

			resizeBotsDeals(offsetBottom);
		});

		$('#simple-switch').simpleSwitch();
		$('#simple-switch').prop('disabled', false);

		$('#simple-switch').on('change.toggleSwitch', function() {

			if ($(this).parent().hasClass('checked')) {

				$('#dataBox').css('overflow-y', 'auto');

				$('#status-text').text('Live');

				stopCountdown();

				flushBuffer();

			} else {

				$('#dataBox').css('overflow-y', 'auto');

				$('#status-text').text('Paused');

				startCountdown(60);
			}
		});
	});


function startCountdown(duration) {

	let remaining = duration;

	$('#countdown').text(`(${remaining}s)`);

	countdownTimerLogs = setInterval(() => {

		remaining--;

		$('#countdown').text(`(${remaining}s)`);

		if (remaining <= 0) {

			clearInterval(countdownTimerLogs);

			$('#countdown').text('');

			setLiveState();
		}
	}, 1000);
}


function stopCountdown() {

	clearInterval(countdownTimerLogs);

	$('#countdown').text('');
}


function displayLog(data) {

	let msg = '<div class="logRow">' + data + '</div>';

	$('#dataBox').prepend(msg);

	let currentRows = $('.logRow').length;

	if (currentRows > maxRows) {

		$('.logRow').slice(maxRows).remove(); // better suited for prepending
	}

	resizeBotsDeals(offsetBottom);
}


function setLiveState() {

	$('#simple-switch').switchToggle(true);

	$('#dataBox').css('overflow-y', 'auto');

	$('#status-text').text('Live');

	flushBuffer();

	stopCountdown();
}


function flushBuffer() {

	// Prepend buffered entries in order & flush
	bufferLogs.forEach(displayLog);

	bufferLogs = [];
}

</script>


<main>

	<div id="contentBox">

        <div class="contentHeaderBox" style="display: flex; align-items: center; justify-content: space-between;">
            <div style="display: flex; align-items: center;">
                <input type="checkbox" id="simple-switch" checked>
                <span id="status-text" style="margin-left: 10px; min-width: 60px; display: inline-block;">Live</span>
                <span id="countdown" style="min-width: 50px; display: inline-block;"></span>
            </div>
                <b class="contentHeader" style="flex-grow: 1; text-align: center; margin: 0 20px;"><%- appData.name %> Realtime Logs</b>
                <span style="visibility: hidden; flex-grow: 0;"><input type="checkbox" style="visibility: hidden;"></span>  <!-- balance -->
        </div>
        <% if (isLiteLog) { %>
            <div class="flex-container">
                <div class="lite-log">
                    <h3>Lite Logging Enabled</h3>
                    <p>All logs will be written to console.</p>
                    <p>To store logs, restart SymBot without params</p>
                </div>
            </div>
        <% } 
        else { %> 
        <div id="dataBox" class="botsDealsBox" style="width: 100%;"></div>
        <% } %>
    </div>

</main>

<%- include('./partialsFooterView'); %>
