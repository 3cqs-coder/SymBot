<%- include('../../partialsHeaderView'); %>

<script>

	let timeOutId;
	let dealTracker = {};
	let dealTrackerErrors = {};
	let activeBots = [];
	let modalId = 'activeDealsView';

	const tooltipDelayMs = 250;
	const tooltipDisplayDelayMs = 1000;

	const actionButtons = {
							'add': {
										'button': '<span class="disableButton">$+</span>',
										'tooltip': 'Add funds to deal'
									},
							'cancel': {
										'button': '<span class="disableButton">X</span>',
										'tooltip': 'Cancel deal'
									},
							'edit': {
										'button': '<span class="disableButton">&#9998;</span>',
										'tooltip': 'Edit deal'
									},
							'panic': {
										'button': '<span class="disableButton" style="font-size: 1.0rem;">&#128176</span>',
										'tooltip': 'Close deal'
									},
							'pause': {
										'button': '<span class="disableButton">&#8545;</span>',
										'tooltip': 'Pause deal'
									},
							'resume': {
										'button': '<span class="disableButton">&#9658;</span>',
										'tooltip': 'Resume deal'
									},
							'stop': {
										'button': '<span class="disableButton">&#9726;</span>',
										'tooltip': 'Stop bot'
									}
						  };


	const convertBoolean = new Function('return ' + `<%- convertBoolean %>`)();


	function setReloadTimeout() {

		timeOutId = setTimeout(() => { getActiveDeals(); }, 5000);
	}


	function dealEdit(dealId) {

		const deal = dealTracker[dealId];

		//const dcaMaxOrder = deal['info']['safety_orders_max'];
		const dcaMaxOrder = deal['config']['dcaMaxOrder'];
		const dcaTakeProfitPercent = deal['config']['dcaTakeProfitPercent'];
		const dealLast = deal['config']['dealLast'];

		$('#dealEditId').val(dealId);
		$('#dcaMaxOrder').val(dcaMaxOrder);
		$('#dealLast').val(dealLast);
		$('#dcaTakeProfitPercent').val(dcaTakeProfitPercent);

		$('#dealLast').prop('checked', false);
		$('#dealLast').switchToggle(false);

		if (dealLast != undefined && dealLast != null && dealLast != '') {

			$('#dealLast').prop('checked', true);
			$('#dealLast').switchToggle(true);
		}

		openModal(modalId, '#boxDealEdit', 'Deal ID ' + dealId, '', '#modalDealEdit');
  	}


	function panicSellConfirm(dealId) {

		let randNum = Math.floor(1000 + Math.random() * 9000);

		$.confirm({

					title: false,
					boxWidth: '50%',
					useBootstrap: false,
					content: '<div style="font-size: 1.2rem; text-align: left;">Close deal ' + dealId + ' at current market price?<br><br>' +
						'Type <b>' + randNum + '</b> in the box to confirm close deal: ' +
						'<form action="" style="display: inline;"><input type="text" id="confirmNum" class="form-field" onkeypress="if (event.which < 48 || event.which > 57) if (event.which != 8) return false;" required /></form></div>',
					buttons: {
								formSubmit: {
												btnClass: 'btn-default',
												text: '<div style="color: #d80f08;">Close Deal</div>',
												action: function () {

													let confirmNum = this.$content.find('#confirmNum').val();
													
													if (!confirmNum || confirmNum != randNum) {

														alertBox('Confirmation number incorrect');
														return false;
													}
													
													panicSell(dealId);
												}
											},
							 	cancel: {

									 		btnClass: 'btn-default',
									 		text: '<div style="color: #000000;">Cancel</div>',	
										 	action: function () { }
									 	}
							 },
							 onContentReady: function () {

							 	let jc = this;

							 	this.$content.find('form').on('submit', function (e) {

							 		e.preventDefault();
							 		jc.$$formSubmit.trigger('click');
								});
							}
		});
	}


	function stopBotConfirm(botName, selector, data) {

		clearTimeout(timeOutId);

		$.confirm({

					title: false,
					boxWidth: '50%',
					useBootstrap: false,
					content: '<div style="font-size: 1.2rem; text-align: left;">Disable ' + botName + '? Current deals will continue running until they complete.</div>',
					buttons: {

								ok: {
										btnClass: 'btn-default',
										text: '<div style="color: #d80f08;">Disable Bot</div>',
										action: function () {

											stopBot(selector, data);
										}
									 },
							 	cancel: {

									 		btnClass: 'btn-default',
									 		text: '<div style="color: #000000;">Cancel</div>',	
										 	action: function () { setReloadTimeout(); }
									 	}
							 }
		});
	}


	function getActiveDeals() {

		//$('#spinner-overlay').fadeIn(100);

		$.ajax({
					type: 'GET',
					url: './api/deals',
					data: {},
					dataType: 'json',
					success: function(data) {

						//$('#spinner-overlay').fadeOut(100);

						let date = data.date;
						let deals = data.data;

						populateDeals(date, deals);

						setReloadTimeout();
					},
					error: function(data) {

						// Some error in ajax call
						//$('#spinner-overlay').fadeOut(100);

						alertBox('Error: ' + JSON.stringify(data), function() { setReloadTimeout(); });
					}
		});
	}


	function panicSell(dealId) {

		$('#spinner-overlay').fadeIn(100);

		$.ajax({
					type: 'POST',
					url: './api/deals/' + dealId + '/panic_sell',
					data: {},
					dataType: 'json',
					success: function(data) {

						$('#spinner-overlay').fadeOut(100);

						if (!data.success) {

							alertBox('Unable to close deal: ' + data['data']);
						}
						else {

							alertBox('Deal ID ' + dealId + ' closed');
						}
					},
					error: function(data) {

						// Some error in ajax call
						$('#spinner-overlay').fadeOut(100);

						alertBox('Error: ' + JSON.stringify(data));
					}
		});
	}


	function dealUpdate(dealId, data) {

		$('#spinner-overlay').fadeIn(100);

		$.ajax({
					type: 'POST',
					url: './api/deals/' + dealId + '/update_deal',
					data: data,
					dataType: 'json',
					success: function(data) {

						$('#spinner-overlay').fadeOut(100);

						if (!data.success) {

							alertBox('Unable to update deal: ' + data['data'], function() { });
						}
						else {

							alertBox('Deal ID ' + dealId + ' updated', function() { });
						}
					},
					error: function(data) {

						// Some error in ajax call
						$('#spinner-overlay').fadeOut(100);

						alertBox('Error: ' + JSON.stringify(data), function() { });
					}
		});
	}


	function stopBot(selector, data) {

		let botId = data.bot_id;

		$('#spinner-overlay').fadeIn(100);

		$.ajax({
					type: 'POST',
					url: './api/bots/' + botId + '/disable',
					data: data,
					dataType: 'json',
					success: function(data) {

						$('#spinner-overlay').fadeOut(100);

						if (!data.success) {

							alertBox('Unable to disable bot', function() { setReloadTimeout(); });
						}
						else {

							$('[id*="stop' + botId + '"]').text('');
							//selector.text('');

							alertBox('Bot Disabled', function() { setReloadTimeout(); });
						}
					},
					error: function(data) {

						// Some error in ajax call
						$('#spinner-overlay').fadeOut(100);

						alertBox('Error: ' + JSON.stringify(data), function() { setReloadTimeout(); });
					}
		});
	}


	function pauseDeal(pair, dealId, pause, pauseBuy, pauseSell) {

		let pairSplit = pair.split('/');
		let quote = pairSplit[1];

		$.confirm({
			title: false,
			boxWidth: "50%",
			useBootstrap: false,
	 		content: `<div style="font-size: 1.2rem; text-align: left;">Pause / Resume deal ${dealId}?<br><br>
			<form action="" style="display: inline;">
			This will pause or resume any further buying and / or selling for this deal
			<br><br>

			<input id="dealPauseBuy" name="dealPauseBuy" type=checkbox class="form-field"> &nbsp; <b>Pause Buy</b>
			<br>
			<input id="dealPauseSell" name="dealPauseSell" type=checkbox class="form-field"> &nbsp; <b>Pause Sell</b>

			<br><br>
			<input type="checkbox" id="confirmBox" class="form-field" style="width: 20px;" /> <b>Check the box to confirm <span style="color: #d80f08;">PAUSE / RESUME</span> deal</b>
			</form>
			</div>`,
			buttons: {
				  formSubmit: {
					  btnClass: 'btn-default',
					  text: '<div style="color: #d80f08;">Pause / Resume Deal</div>',
					  action: function() {

						const inputValue = parseFloat($('#confirmNum').val());
						const confirmBox = $('#confirmBox').prop('checked');

						const pauseBuy = convertBoolean($('#dealPauseBuy').prop('checked'), false);
						const pauseSell = convertBoolean($('#dealPauseSell').prop('checked'), false);

						if (!confirmBox) {

							alertBox('You must check the box to confirm pause / resume deal', function() {});
						}
						else {

							processPauseDeal(dealId, pauseBuy, pauseSell);
				 		}
			  		},
				},
		  		cancel: {
			 		btnClass: 'btn-default',
			  		text: '<div style="color: #000000;">Cancel</div>',
			  		action: function() {},
				},
			},
			onOpenBefore: function () {
 
				// Set both buy and sell to true
				if (pause) {

					pauseBuy = true;
					pauseSell = true;
				}

				$('#dealPauseBuy').simpleSwitch();
				$('#dealPauseSell').simpleSwitch();

				$('#dealPauseBuy').prop('checked', pauseBuy);
				$('#dealPauseBuy').switchToggle(pauseBuy);

				$('#dealPauseSell').prop('checked', pauseSell);
				$('#dealPauseSell').switchToggle(pauseSell);
			},
	  		onContentReady: function() {

				$('#confirmBox').prop('checked', false);

				let jc = this;
		  		this.$content.find("form").on("submit", function(e) {
					e.preventDefault();
			  		jc.$$formSubmit.trigger("click");
		  		});
	  		},
  		});
	}


	function processPauseDeal(dealId, pauseBuy, pauseSell) {

		const requestBody = {

			pauseBuy: pauseBuy,
			pauseSell: pauseSell
		};

		$('#spinner-overlay').fadeIn(100);

		$.ajax({

			type: 'POST',
	  		url: './api/deals/' + dealId + '/pause',
	  		data: requestBody,
	  		dataType: 'json',
	  		success: function(data) {

				$('#spinner-overlay').fadeOut(100);

				if (!data.success) {
					alertBox('Unable to update pause status for deal: ' + data['data'], function() {});
				}
				else {
					alertBox('Successfully updated pause status for deal: ' + dealId, function() {});
				}
			},
			error: function(data) {
				// Some error in ajax call
				$('#spinner-overlay').fadeOut(100);

				alertBox('Error: ' + JSON.stringify(data), function() {});
			},
		});
	}


	function cancelDeal(pair, dealId) {

		let pairSplit = pair.split('/');
		let quote = pairSplit[1];

		$.confirm({
	 		title: false,
			boxWidth: "50%",
	  		useBootstrap: false,
	  		content: `<div style="font-size: 1.2rem; text-align: left;">Cancel deal ${dealId}?<br><br>
			<form action="" style="display: inline;">
			This will cancel and remove the active deal from any further trading without selling any assets already bought from previous orders
			<br><br>
			<input type="checkbox" id="confirmBox" class="form-field" style="width: 20px;" /> <b>Check the box to confirm <span style="color: #d80f08;">CANCEL</span> deal</b>
			</form>
			</div>`,
	  		buttons: {
		  		formSubmit: {
			  		btnClass: 'btn-default',
			  		text: '<div style="color: #d80f08;">Cancel Deal</div>',
			  		action: function() {

				  		const inputValue = parseFloat($('#confirmNum').val());
						const confirmBox = $('#confirmBox').prop('checked');

						if (!confirmBox) {

							alertBox('You must check the box to confirm cancel deal', function() {});
						}
						else {

							processCancelDeal(dealId);
				 		}
			  		},
		  		},
		  		cancel: {
			  		btnClass: 'btn-default',
			  		text: '<div style="color: #000000;">Cancel</div>',
			  		action: function() {},
				},
			},
	  		onContentReady: function() {

				$('#confirmBox').prop('checked', false);

				let jc = this;
		  		this.$content.find("form").on("submit", function(e) {
					e.preventDefault();
			  		jc.$$formSubmit.trigger("click");
		  		});
	  		},
  		});
	}


	function processCancelDeal(dealId) {

		const requestBody = {};

		$('#spinner-overlay').fadeIn(100);

		$.ajax({

			type: 'POST',
	  		url: './api/deals/' + dealId + '/cancel',
	  		data: requestBody,
	  		dataType: 'json',
	  		success: function(data) {

				$('#spinner-overlay').fadeOut(100);

					if (!data.success) {
						alertBox('Unable to cancel deal: ' + data['data'], function() {});
					}
				else {
					alertBox('Successfully canceled deal: ' + dealId, function() {});
				}
			},
			error: function(data) {
				// Some error in ajax call
				$('#spinner-overlay').fadeOut(100);

				alertBox('Error: ' + JSON.stringify(data), function() {});
			},
		});
	}


	function showAddFunds(pair, dealId) {

		let pairSplit = pair.split('/');
		let quote = pairSplit[1];

		$.confirm({
  			title: false,
  			boxWidth: "50%",
  			useBootstrap: false,
  			content: `<div style="font-size: 1.2rem; text-align: left;">Add funds to deal ${dealId}?<br><br>
      	Enter the amount of ${quote} funds to add:
      	<form action="" style="display: inline;">
        <input type="text" id="confirmNum" class="form-field" onkeypress="if (event.which < 48 || event.which > 57) if (event.which != 8) return false;" required />
		<br><br>
        <input type="checkbox" id="confirmBox" class="form-field" style="width: 20px;" /> <b>Check the box to confirm <span style="color: #1a9f00;">ADD FUNDS</span> to deal</b>
		</form>
    	</div>`,
  			buttons: {
  				formSubmit: {
  					btnClass: 'btn-default',
  					text: '<div style="color: #1a9f00;">Add Funds</div>',
  					action: function() {

  						const inputValue = parseFloat($('#confirmNum').val());
						const confirmBox = $('#confirmBox').prop('checked');

						if (!confirmBox) {

							alertBox('You must check the box to confirm adding funds', function() {});

						} else if (!isNaN(inputValue)) {

  							processAddFunds(inputValue, dealId);

  						} else {

  							alertBox('Invalid amount entered', function() {});
  						}
  					},
  				},
  				cancel: {
  					btnClass: 'btn-default',
  					text: '<div style="color: #000000;">Cancel</div>',
  					action: function() {},
  				},
  			},
  			onContentReady: function() {

				$('#confirmBox').prop('checked', false);

  				let jc = this;
  				this.$content.find("form").on("submit", function(e) {
  					e.preventDefault();
  					jc.$$formSubmit.trigger("click");
  				});
  			},
  		});
	}


	function processAddFunds(value, dealId) {

		if (isNaN(value)) {

			alertBox('Invalid amount entered', function() {});
  			return;
  		}

  		const requestBody = {

			volume: parseFloat(value),
		};

		$('#spinner-overlay').fadeIn(100);

		$.ajax({

			type: 'POST',
  			url: './api/deals/' + dealId + '/add_funds',
  			data: requestBody,
  			dataType: 'json',
  			success: function(data) {

				$('#spinner-overlay').fadeOut(100);

  				if (!data.success) {
  					alertBox('Unable to update deal: ' + data['data'], function() {});
  				}
				else {
  					alertBox('Successfully added funds to: ' + dealId, function() {});
  				}
  			},
  			error: function(data) {
  				// Some error in ajax call
  				$('#spinner-overlay').fadeOut(100);

	  			alertBox('Error: ' + JSON.stringify(data), function() {});
  			},
  		});
	}


	function populateDeals(date, deals) {

		const maxMins = 2;

		let totalProfit = 0;
		let activeDeals = 0;
		let inDeals = 0;
		let dealDataErrors = 0;
		const selectedBot = $('#active-bot-filter').val();

		let msgBoxColor = '#386ec2';
		let profitTotalColor = '#1a9f00';

		let msgBox = '';

		let contentArr = [];
		let dealsErrorArr = [];

		dealTracker = {};

		for (let i = 0; i < deals.length; i++) {

			if(!activeBots.includes(deals[i].botName)) {
				activeBots.push(deals[i].botName);
				$('#active-bot-filter').append('<option value="' + deals[i].botName + '">' + deals[i].botName + '</option>');
			}

			if(selectedBot != 'all' && deals[i].botName != selectedBot) {
				continue;
			}

			activeDeals++;

			let {
					add: { button: addFundsButtonDeal },
					edit: { button: editButtonDeal },
					cancel: { button: cancelButtonDeal },
					pause: { button: pauseButtonDeal },
					resume: { button: resumeButtonDeal },
					stop: { button: stopButtonDeal },
					panic: { button: panicButtonDeal }
			} = actionButtons;

			let dealVolume = deals[i].orders.filter(order => order.filled).reduce((acc, order) => acc + Number(order.amount), 0);

			inDeals += dealVolume;

			let dealBackground = '';
			let profitPercColor = '#1a9f00';
			let pauseButtonId = 'pause';

			let dealCount;

			const deal = deals[i];

			const config = deal['config'];
			const dealId = deal['dealId'];
			const pause = deal['info']['pause'];
			const pauseBuy = deal['info']['pause_buy'];
			const pauseSell = deal['info']['pause_sell'];
			const dealError = deal['info']['error'];
			const lastUpdated = deal['info']['updated'];
			const botActive = deal['info']['bot_active'];
			const profit = deal['info']['profit'];
			const profitBase = deal['info']['profit_base'];
			const profitPerc = deal['info']['profit_percentage'];

			const duration = timeDiff(new Date(), new Date(deal['date']));

			if (!botActive) {

				stopButtonDeal = '';
			}

			if (pause || pauseBuy || pauseSell) {

				pauseButtonId = 'resume';
				pauseButtonDeal = resumeButtonDeal;
			}

			if (profitPerc <= 0) {

				profitPercColor = '#d82715';
			}

			if (deal['info']['deal_max'] == 0) {

				deal['info']['deal_max'] = '&#8734;';
			}

			// Deal data issue
			if (isNaN(deal['info']['deal_count']) || (dealError != undefined && dealError != null && dealError != '')) {

				const maxSec = 30;

				// Wait to display any error since deal might be starting
				if (dealTrackerErrors[dealId] == undefined || dealTrackerErrors[dealId] == null) {

					dealTrackerErrors[dealId] = {};
					dealTrackerErrors[dealId]['date'] = new Date();

					continue;
				}
				else {

					let diffSec = (new Date().getTime() - new Date(dealTrackerErrors[dealId]['date']).getTime()) / 1000;

					if (diffSec > maxSec) {

						dealBackground = '#B78225';
						dealDataErrors++;
					}
					else {

						continue;
					}
				}
			}
			else {

				// Remove from deal error tracker
				delete dealTrackerErrors[dealId];
			}

			dealCount = deal['info']['deal_count'] + ' / ' + deal['info']['deal_max'];

			let diffSec = (new Date(date).getTime() - new Date(lastUpdated).getTime()) / 1000;

			if (diffSec > (60 * maxMins)) {

				diffSec = (diffSec / 60).toFixed(2);

				dealsErrorArr.push(dealId);
			}

			totalProfit += profit;

			dealTracker[dealId] = {};

			dealTracker[dealId]['info'] = deal['info'];
			dealTracker[dealId]['config'] = config;
			dealTracker[dealId]['orders'] = deal['orders'];

			const filledOrders = deal['orders'].filter(item => item.filled);
			const manualOrders = filledOrders.filter(item => item.manual);

			let safetyOrdersTotalDisplay = config['dcaMaxOrder'];

			if (manualOrders.length > 0) {

				safetyOrdersTotalDisplay += ' (+' + manualOrders.length + ')';
			}

			contentArr.push('<tr style="background-color: ' + dealBackground + ';" data-dealid="' + dealId + '" data-pair="' + deal['pair'] + '">');
			contentArr.push('<td>' + deal['info']['bot_name'] + '</td>');
			contentArr.push('<td>' + dealId + '</td>');
			contentArr.push('<td>' + deal['pair'] + '</td>');
			contentArr.push('<td>' + duration + '</td>');
			contentArr.push('<td>$' + deal['info']['price_last'] + '</td>');
			contentArr.push('<td>$' + deal['info']['price_target'] + '</td>');
			contentArr.push('<td>$' + dealVolume.toFixed(2) + '</td>')
			contentArr.push('<td style="color: ' + profitPercColor+ '">$' + profit + '</td>');
			contentArr.push('<td style="color: ' + profitPercColor+ '">' + profitBase + '</td>');
			contentArr.push('<td style="color: ' + profitPercColor+ '">' + profitPerc + '%</td>');
			contentArr.push('<td>' + config['dcaTakeProfitPercent'] + '%</td>');
			contentArr.push('<td>' + deal['info']['safety_orders_used'] + ' / ' + safetyOrdersTotalDisplay + '</td>');
			contentArr.push('<td>' + dealCount + '</td>');
			contentArr.push('<td style="text-align: center;"><div id="edit' + dealId + i + '">' + editButtonDeal + '</div></td>');
			contentArr.push('<td style="text-align: center;"><div id="panic' + dealId + i + '">' + panicButtonDeal + '</div></td>');
			contentArr.push('<td style="text-align: center;"><div id="add' + dealId + i + '">' + addFundsButtonDeal + '</div></td>');
			contentArr.push('<td data-pause="' + pause + '" data-pausebuy="' + pauseBuy + '" data-pausesell="' + pauseSell + '" style="text-align: center;"><div id="' + pauseButtonId + dealId + i + '">' + pauseButtonDeal + '</div></td>');
			contentArr.push('<td style="text-align: center;"><div id="cancel' + dealId + i + '">' + cancelButtonDeal + '</div></td>');
			contentArr.push('<td data-botid="' + deal['info']['bot_id'] + '" data-botname="' + deal['info']['bot_name'] + '" style="text-align: center;"><div id="stop' + deal['info']['bot_id'] + i + '">' + stopButtonDeal + '</div></td>');
			contentArr.push('</tr>');
		}

		if (totalProfit <= 0) {

			profitTotalColor = '#d82715';
		}

		$('#msgBox').empty();
		$('#botsDeals tbody').empty();

		if (dealsErrorArr.length > 0) {

			msgBox += '<div style="display: block;"><b>WARNING:</b> ' + dealsErrorArr.length + ' deals exceed last updated time of ' + maxMins + ' minutes. Check logs for more details.</div>';
		}

		if (dealDataErrors > 0) {

			msgBox += '<div style="display: block;"><b>WARNING:</b> ' + dealDataErrors + ' deals have errors or invalid data</div>';
		}

		if (msgBox != '') {

			$('#msgBox').css('color', msgBoxColor);
			$('#msgBox').html('<div style="display: block;">' + msgBox + '</div>');
		}

		$('#botsDeals tbody').append(contentArr.join(''));

		$('#totalProfit').css('color', profitTotalColor);
		$('#totalProfit').html('$' + totalProfit.toFixed(2));

		$('#inDeals').html('$' + inDeals.toFixed(2));
		$('#totalDeals').html(activeDeals);
		
		$('#botsDeals').tablesorter().trigger('update');

		resizeBotsDeals();
	}


	$(document).ready(function() {
 
		let tooltipDisplayTime = {};

		function getTooltipText(id) {

			for (var key in actionButtons) {

				if (id.startsWith(key)) {

					return actionButtons[key]['tooltip'];
				}
			}

			return null;
		}


		$(document).on('mouseenter', '[id]', function() {

			let $this = $(this);
			let tooltipText = getTooltipText($this.attr('id'));

			if (tooltipText) {

				let now = Date.now();
				let lastDisplay = tooltipDisplayTime[$this.attr('id')];

				if (!lastDisplay || now - lastDisplay >= tooltipDisplayDelayMs) {

					$this.data('tooltipTimeout', setTimeout(function() {

						let tooltip = $('<div class="toolTipButtons"></div>').appendTo('body');
						
						tooltip.text(tooltipText).css({
														'top': $this.offset().top - tooltip.outerHeight() - 10,
														'left': $this.offset().left + ($this.outerWidth() / 2) - (tooltip.outerWidth() / 2)
													  }).fadeIn(200);

						tooltipDisplayTime[$this.attr('id')] = now;

					}, tooltipDelayMs));
				}
			}
		});


		$(document).on('mouseleave click', '[id]', function() {

			clearTimeout($(this).data('tooltipTimeout'));

			$('.toolTipButtons').fadeOut(200);
		});


		$('#dealLast').simpleSwitch();
 
		$(window).resize(function() {

	 		resizeBotsDeals();
		});


		$('#formSubmitEdit').on('click', function(e) {

			e.preventDefault();

			const dealId = $('#dealEditId').val();
			const dealLast = $('#dealLast').prop('checked');
			const dcaMaxOrder = $('#dcaMaxOrder').val();
			const dcaTakeProfitPercent = $('#dcaTakeProfitPercent').val();
	
			let dataObj = {
							'dealLast': dealLast,
							'dcaMaxOrder': dcaMaxOrder,
							'dcaTakeProfitPercent': dcaTakeProfitPercent
						  };

			modalTracker[modalId].dialog('close');

			dealUpdate(dealId, dataObj);
		});


		$(document).on('keypress', '#botsCreate input', function(e) {

			const id = $(this).attr('id');
			const val = $('#' + id).val();

			const charCode = (e.which) ? e.which : e.keyCode;

			if (id == undefined || id == null) {

				return;
			}

			let regEx = /[^0-9\.]/g;

			if (id.toLowerCase() == 'dcamaxorder') {

				regEx = /[^0-9]/g;
			}

			if (charCode == 46 && (val.split('.').length - 1) > 0) {

				return false;
			}

			if (String.fromCharCode(charCode).match(regEx)) { return false; }
		});


		$('#botsDeals').tablesorter({

			widgets: [ 'saveSort', 'stickyHeaders', 'uitheme', 'columnSelector' ],
			widgetOptions: {
				saveSort: true,
				stickyHeaders_attachTo: '',
				columnSelector_mediaqueryHidden: true,
				columnSelector_mediaqueryName: 'Show Default',
				columnSelector_container: $('#botDealSelector')
			},
			durationLength : 4,
			durationLabels : '(?:years|year|y),(?:days|day|d),(?:hours|hour|h),(?:minutes|minute|min|m),(?:seconds|second|sec|s)',
			textExtraction: {

				8: function(node) {

					if (node.innerHTML.indexOf('%') != -1) {

						let val = stripHtml(node.innerHTML);
						return val.replace('%', '');
					}

					return node.innerHTML;
				},
				9: function(node) {

					if (node.innerHTML.indexOf('%') != -1) {

						let val = stripHtml(node.innerHTML);
						return val.replace('%', '');
					}

					return node.innerHTML;
				}
			},
			headers: {

				// Set "sorter : false" (no quotes) to disable the column
				3: {
					sorter: "duration"
				},
				4: {
					sorter: "currency"
				},
				5: {
					sorter: "currency"
				},
				6: {
					sorter: "currency"
				},
				7: {
					sorter: "currency"
				},
				8: {
					sorter: "currency"
				}
			}
		});


		$('#botDealSelectorShow').click(function() {

			if ($('.botDealSelectorWrapper').is(':visible')) {

				$('.botDealSelectorWrapper').fadeOut(300);
			}
			else {

				$('.botDealSelectorWrapper').fadeIn(300);
			}
		});


		$(document).on('click', '#botsDeals tbody tr td', function() {

			let col = $(this).index();
			let row = $(this).closest('tr');
			let content = $(this).text();

			let colCount = $(row).find('td').length;

			if (col == 2) {

				// TradingView Chart
				let pair = content;
				let dealId = row.data('dealid');
				let exchange = dealTracker[dealId]['config']['exchange'].toUpperCase();

				showTradingView(modalId, 'modal', false, false, pair, exchange);
			}
			else if (col == (colCount - 1) && content != '') {

				// Disable / Stop Bot
				let data = { 'bot_id': '' };

				let botId = $(this).data('botid');
				let botName = $(this).data('botname');

				if (botId) {

					data.bot_id = botId;

					stopBotConfirm(botName, $(this), data);
				}
			}
			else if (col == (colCount - 2)) {

				// Cancel Deal
				let pair = row.data('pair');
				let dealId = row.data('dealid');

				if (dealId) {

					cancelDeal(pair, dealId);	
				}
      		}
			else if (col == (colCount - 3)) {

				// Pause Deal
				let pair = row.data('pair');
				let dealId = row.data('dealid');

				let pause = $(this).data('pause');
				let pauseBuy = $(this).data('pausebuy');
				let pauseSell = $(this).data('pausesell');

				if (dealId) {

					pauseDeal(pair, dealId, pause, pauseBuy, pauseSell);
				}
			}
			else if (col == (colCount - 4)) {

				// Add Funds
				let pair = row.data('pair');
				let dealId = row.data('dealid');

				if (dealId) {

					showAddFunds(pair, dealId);	
				}
			}
			else if (col == (colCount - 5)) {

				// Panic Sell / Close Deal
				let dealId = row.data('dealid');

				if (dealId) {

					panicSellConfirm(dealId);
				}
			}
			else if (col == (colCount - 6)) {

				// Edit Deal
				let data = { 'deal_id': '' };

				let dealId = row.data('dealid');

				if (dealId) {

					data.deal_id = dealId;

					dealEdit(dealId);
				}
			}
			else {

				// Order History
				let dealId = row.data('dealid');

				if (dealTracker[dealId] == undefined || dealTracker[dealId] == null) {

					return;
				}

				showOrderHistory(modalId, dealId, dealTracker[dealId]['info']['active'], dealTracker[dealId]['orders']);
			}
		});

		$('#active-bot-filter').change(() => {

			getActiveDeals();
		})
		
		getActiveDeals();

	});


</script>

<center>
<main>

	<div class="botDealSelectorWrapper">
		<div id="botDealSelector" class="botDealSelector">
		  <!-- this div is where the column selector is added -->
		</div>
	  
		<div class="botDealSelectorHidden">
			<div id="popover-botdeals"></div>
		</div>
	</div>

	<div id="contentBox">

		<div style="position: relative;">

			<div class="contentHeaderBox">

				<b class="contentHeader">Active DCA Bot Deals</b>
				<span id="botDealSelectorShow">&#9881;</span>
				<span style="display: flex; font-size: 1.2rem; justify-content: center; gap: 20px; margin-top: 10px;">
					<p style="margin-top: 0; margin-bottom: 0;">Active P/L: <span id="totalProfit"></span></p>
					<p style="margin-top: 0; margin-bottom: 0;">In Deals: <span id="inDeals"></span></p>
					<p style="margin-top: 0; margin-bottom: 0;">Deals: <span id="totalDeals"></span></p>
					<div class="active-filter" style="display: inline-flex; align-items: center; gap: 5px; height: 20px;">
						<p>Bot: </p>
						<select class="form-field" id="active-bot-filter">
							<option value="all"></option>
						</select>
					</div>
				</span>
			</div>

			<span id="msgBox" style="position: relative; display: flex; justify-content: center;"></span>

			<div class="botsDealsBox">

				<table id="botsDeals" border=0 cellspacing=0 cellpadding=0>

				<thead style="position: sticky; top: 0; z-index: 1000;">
					<tr class="tableHeader">
						<th>Bot Name</th> <th>Deal ID</th> <th>Pair</th> <th>Duration</th> <th>Price</th> <th>Price Target</th> <th>Volume</th> <th>Profit</th> <th>Profit &#126;</th> <th>Profit %</th> <th>TP</th> <th>Safety Orders</th> <th>Deals</th> <th data-sorter="false" class="columnSelector-disable"></th> <th data-sorter="false" class="columnSelector-disable"></th> <th data-sorter="false" class="columnSelector-disable"></th> <th data-sorter="false" class="columnSelector-disable"></th> <th data-sorter="false" class="columnSelector-disable"></th> <th data-sorter="false" class="columnSelector-disable"></th>
					</tr>
				</thead>

				<tbody></tbody>

				</table>
			</div>
		</div>


		<div id="boxDealEdit" style="display: none; margin: 0 auto;">

			<table id="botsCreate" style="margin-top: 20px; max-width: 225px;" cellpadding=0 cellspacing=0>

			<form id="formDealEdit" autocomplete="off" action="">

				<input id="dealEditId" name="dealEditId" type=hidden>

				<tr><td>Target Profit %:</td> <td><input id="dcaTakeProfitPercent" name="dcaTakeProfitPercent" class="form-field"></td></tr>
				<tr><td>Max Safety Orders:</td> <td><input id="dcaMaxOrder" name="dcaMaxOrder" class="form-field"></td></tr>
				<tr><td>Last Deal:
				
				<span class="toolTip" style="padding: 0px 4px;">?<span class="toolTipText">
				This will prevent a new deal from starting after this deal completes. Setting only applies to this deal. If you have multiple deals running with the same pair, it will not affect the other deals. Changing this may override all other bot or deal settings and signals, however it is possible signals received afterward can change this again.
				</span></span>

				</td> <td><input id="dealLast" name="dealLast" type=checkbox class="form-field"></td></tr>

				<tr><td colspan=2 style="padding-top: 20px;"><button id="formSubmitEdit" class="btn">Update Deal</button></td></tr>
			</form>

			</table>
		</div>

	</div>

</main>
</center>

<%- include('../../partialsFooterView'); %>
