<%- include('../../partialsHeaderView'); %>


<script>

	let timeOutId;
	let dealTracker = {};

	function setReloadTimeout() {

		timeOutId = setTimeout(() => { getActiveDeals(); }, 5000);
	}


	function openModal(title, content) {

		$('#modal').dialog({

			dialogClass: 'fixed-dialog',
			create: function (event, ui) {

				$('.ui-dialog').css('border-radius', '5px');
			},
			show: {
					effect: 'scale',
					duration: 250
			},
			hide: {
					effect: 'scale',
					duration: 250
			},
			title: title,
			autoOpen: false,
			draggable: false,
			width: '90%',
			height: ($(window).height() - 200),
			modal: true,
			open: function (event, ui) {

				$('#modal').html(content);
			}
		});

		$('#modal').dialog('open');
	}


	function stopBotConfirm(botName, selector, data) {

		clearTimeout(timeOutId);

		$.confirm({

					title: false,
					boxWidth: '50%',
					useBootstrap: false,
					content: '<div style="font-size: 1.2rem; text-align: left;">Disable ' + botName + '? Current deals will continue running until they complete.</div>',
					buttons: {

								ok: {
										btnClass: 'btn-default',
										text: '<div style="color: #d80f08;">Disable Bot</div>',
										action: function () {

											stopBot(selector, data);
										}
									 },
							 	cancel: {

									 		btnClass: 'btn-default',
									 		text: '<div style="color: #000000;">Cancel</div>',	
										 	action: function () { setReloadTimeout(); }
									 	}
							 }
		});
	}


	function getActiveDeals() {

		//$('#spinner-overlay').fadeIn(100);

		$.ajax({
					type: 'GET',
					url: '/api/deals',
					data: {},
					dataType: 'json',
					success: function({ data }) {

						//$('#spinner-overlay').fadeOut(100);

						let deals = data;

						populateDeals(deals);

						setReloadTimeout();
					},
					error: function(data) {

						// Some error in ajax call
						//$('#spinner-overlay').fadeOut(100);

						alertBox('Error: ' + JSON.stringify(data), function() { setReloadTimeout(); });
					}
		});
	}


	function stopBot(selector, data) {

		let botId = data.bot_id;

		$('#spinner-overlay').fadeIn(100);

		$.ajax({
					type: 'POST',
					url: '/api/bots/' + botId + '/disable',
					data: data,
					dataType: 'json',
					success: function(data) {

						$('#spinner-overlay').fadeOut(100);

						if (!data.success) {

							alertBox('Unable to disable bot', function() { setReloadTimeout(); });
						}
						else {

							$('[id*="stop' + botId + '"]').text('');
							//selector.text('');

							alertBox('Bot Disabled', function() { setReloadTimeout(); });
						}
					},
					error: function(data) {

						// Some error in ajax call
						$('#spinner-overlay').fadeOut(100);

						alertBox('Error: ' + JSON.stringify(data), function() { setReloadTimeout(); });
					}
		});
	}


	function showOrderHistory(dealId) {

		if (dealTracker[dealId] == undefined || dealTracker[dealId] == null) {

			return;
		}

		let count = 1;

		let orders = JSON.parse(JSON.stringify(dealTracker[dealId]['orders'])).reverse();

		let table = $('<table id="ordersTable" style="width: 100%;" cellspacing=0 cellpadding=0>');

		let row = $('<tr />');
		row.append($('<th></th> <th>Date</th> <th>Price</th> <th>Qty</th> <th>Amount</th> <th>Sum(Qty)</th> <th>Sum($)</th>'));
		table.append(row);

		for (let i = 0; i < orders.length; i++) {

			let data = orders[i];

			if (data['filled'] != 0) {

				let row = $('<tr />');

				row.append($('<td style="padding: 3px;">' + count + '.</td>'));
				row.append($('<td>' + dateConvertLocal(data['dateFilled']) + '</td>'));
				row.append($('<td>$' + data['price'] + '</td>'));
				row.append($('<td>' + data['qty'] + '</td>'));
				row.append($('<td>$' + data['amount'] + '</td>'));
				row.append($('<td>' + data['qtySum'] + '</td>'));
				row.append($('<td>$' + data['sum'] + '</td>'));

				table.append(row);

				count++;
			}
		}

		openModal('Order History ' + dealId, table);
	}


	function populateDeals(deals) {

		let totalProfit = 0;
		let inDeals = 0;
		let profitTotalColor = '#1a9f00';

		let contentArr = [];

		dealTracker = {};

		for (let i = 0; i < deals.length; i++) {

			//let stopButton = '<span class="disableButton">&#x026AB;</span>';
			let stopButton = '<span class="disableButton">&#9726;</span>';

			let dealVolume = deals[i].orders.filter(order => order.filled === 1).reduce((acc, order) => acc + Number(order.amount), 0);
			inDeals += dealVolume;

			let profitPercColor = '#1a9f00';

			let dealCount;

			const deal = deals[i];

			const config = deal['config'];
			const dealId = deal['dealId'];
			const botActive = deal['info']['bot_active'];
			const profit = deal['info']['profit'];
			const profitPerc = deal['info']['profit_percentage'];

			const duration = timeDiff(new Date(), new Date(deal['date']));

			if (!botActive) {

				stopButton = '';
			}

			if (profitPerc <= 0) {

				profitPercColor = '#d82715';
			}

			if (deal['info']['deal_max'] == 0) {

				deal['info']['deal_max'] = '&#8734;';
			}

			if (isNaN(deal['info']['deal_count'])) {

				continue;
			}
			else {

				dealCount = deal['info']['deal_count'] + ' / ' + deal['info']['deal_max'];
			}

			totalProfit += profit;

			dealTracker[dealId] = {};
			dealTracker[dealId]['orders'] = deal['orders'];

			contentArr.push('<tr data-dealid="' + dealId + '">');
			contentArr.push('<td>' + deal['info']['bot_name'] + '</td>');
			contentArr.push('<td>' + dealId + '</td>');
			contentArr.push('<td>' + deal['pair'] + '</td>');
			contentArr.push('<td>' + duration + '</td>');		
			contentArr.push('<td>$' + deal['info']['price_last'] + '</td>');
			contentArr.push('<td>$' + deal['info']['price_target'] + '</td>');
			contentArr.push('<td>$' + dealVolume.toFixed(2) + '</td>')
			contentArr.push('<td style="color: ' + profitPercColor+ '">$' + profit + '</td>');
			contentArr.push('<td style="color: ' + profitPercColor+ '">' + profitPerc + '%</td>');
			contentArr.push('<td>' + config['dcaTakeProfitPercent'] + '%</td>');
			contentArr.push('<td>' + deal['info']['safety_orders_used'] + ' / ' + deal['info']['safety_orders_max'] + '</td>');
			contentArr.push('<td>' + dealCount + '</td>');
			contentArr.push('<td data-botid="' + deal['info']['bot_id'] + '" data-botname="' + deal['info']['bot_name'] + '" style="text-align: center;"><div id="stop' + deal['info']['bot_id'] + i + '">' + stopButton + '</div></td>');
			contentArr.push('</tr>');
		}

		if (totalProfit <= 0) {

			profitTotalColor = '#d82715';
		}

		$('#botsDeals tbody').empty();
		$('#botsDeals tbody').append(contentArr.join(''));

		$('#totalProfit').css('color', profitTotalColor);
		$('#totalProfit').html('$' + totalProfit.toFixed(2));

		$('#inDeals').html('$' + inDeals.toFixed(2));
		$('#totalDeals').html(deals.length);
		
		$('#botsDeals').tablesorter().trigger('update');

		resizeBotsDeals();
	}


	$(document).ready(function() {
 
		$(window).resize(function() {

			resizeBotsDeals();
		});


		$('#botsDeals').tablesorter({

			widgets: [ 'saveSort', 'stickyHeaders', 'uitheme' ],
			widgetOptions: {
				saveSort: true,
				stickyHeaders_attachTo: '',
				columnSelector_mediaqueryHidden: true
			},
			durationLength : 4,
			durationLabels : '(?:years|year|y),(?:days|day|d),(?:hours|hour|h),(?:minutes|minute|min|m),(?:seconds|second|sec|s)',
			textExtraction: {

				8: function(node) {

					if (node.innerHTML.indexOf('%') != -1) {

						let val = stripHtml(node.innerHTML);
						return val.replace('%', '');
					}

					return node.innerHTML;
				},
				9: function(node) {

					if (node.innerHTML.indexOf('%') != -1) {

						let val = stripHtml(node.innerHTML);
						return val.replace('%', '');
					}

					return node.innerHTML;
				}
			},
			headers: {

				// Set "sorter : false" (no quotes) to disable the column
				3: {
					sorter: "duration"
				},
				4: {
					sorter: "currency"
				},
				5: {
					sorter: "currency"
				},
				6: {
					sorter: "currency"
				},
				7: {
					sorter: "currency"
				}
			}
		});


		$(document).on('click', '#botsDeals tbody tr td', function() {

			let col = $(this).index();
			let row = $(this).closest('tr');
			let content = $(this).text();

			let colCount = $(row).find('td').length;

			if (col == (colCount - 1) && content != '') {

				let data = { 'bot_id': '' };

				let botId = $(this).data('botid');
				let botName = $(this).data('botname');

				if (botId) {

					data.bot_id = botId;

					stopBotConfirm(botName, $(this), data);
				}
			}
			else {

				let dealId = row.data('dealid');

				showOrderHistory(dealId);
			}
		});

		getActiveDeals();

	});


</script>

<center>
<main>

	<div id="modal"></div>

	<div id="contentBox">

		<div style="position: relative;">

			<div class="contentHeaderBox">

				<b class="contentHeader">Active DCA Bot Deals</b>

				<span style="display: flex; font-size: 1.2rem; justify-content: center; gap: 20px; margin-top: 10px;">
					<p style="margin-top: 0; margin-bottom: 0;">Active P/L: <span id="totalProfit"></span></p>
					<p style="margin-top: 0; margin-bottom: 0;">In Deals: <span id="inDeals"></span></p>
					<p style="margin-top: 0; margin-bottom: 0;">Deals: <span id="totalDeals"></span></p>
				</span>
			</div>

			<div class="botsDealsBox">

				<table id="botsDeals" border=0 cellspacing=0 cellpadding=0>

				<thead style="position: sticky; top: 0; z-index: 1000;">
					<tr style="font-weight: bold; text-align: left; white-space: nowrap;">
						<th>Bot Name</th> <th>Deal ID</th> <th>Pair</th> <th>Duration</th> <th>Price</th> <th>Price Target</th> <th>Volume</th> <th>Profit</th> <th>Profit %</th> <th>TP</th> <th>Safety Orders</th> <th>Deals</th> <th data-sorter="false">Disable</th> 
					</tr>
				</thead>

				<tbody></tbody>

				</table>
			</div>
		</div>
	</div>

</main>
</center>

<%- include('../../partialsFooterView'); %>
