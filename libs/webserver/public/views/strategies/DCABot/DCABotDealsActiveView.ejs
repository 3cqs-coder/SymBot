<%- include('../../partialsHeaderView'); %>

<script type="text/javascript" src="https://s3.tradingview.com/tv.js"></script>

<script>

	let modalId;
	let timeOutId;
	let dealTracker = {};
	let tradingViewData = {};

	let tvIntervals = [ '1-1m', '5-5m', '15-15m', '30-30m', '60-1h', '120-2h', '180-3h', '240-4h', 'D-Day', 'W-Week', 'M-Month' ];
	let tvBarStyles = [ '0-Bars', '1-Candles', '2-Line', '3-Area', '4-Renko', '5-Kagi', '6-Point & Figure', '7-Line Break', '8-Heikin Ashi', '9-Hollow Candles' ];

	tradingViewData['theme'] = 'dark';
	tradingViewData['interval'] = tvIntervals[0];
	tradingViewData['bar_style'] = tvBarStyles[8];


	function setReloadTimeout() {

		timeOutId = setTimeout(() => { getActiveDeals(); }, 5000);
	}


	function openModal(divModal, title, content, divAppend) {

		modalId = $(divModal).dialog({

			dialogClass: 'fixed-dialog',
			create: function (event, ui) {

				$('.ui-dialog').css('border-radius', '5px');
			},
			show: {
					effect: 'scale',
					duration: 250
			},
			hide: {
					effect: 'scale',
					duration: 250
			},
			title: title,
			autoOpen: false,
			draggable: false,
			width: '90%',
			height: ($(window).height() - 200),
			modal: true,
			appendTo: divAppend,
			open: function (event, ui) {

				if (content != undefined && content != null && content != '') {

					$(divModal).html(content);
				}
			},
			close: function (event, ui) {
			}
		});

		$(divModal).dialog('open');
	}


	function dealEdit(dealId) {

		const deal = dealTracker[dealId];

		const dcaMaxOrder = deal['info']['safety_orders_max']
		const dcaTakeProfitPercent = deal['config']['dcaTakeProfitPercent'];

		$('#dealEditId').val(dealId);
		$('#dcaMaxOrder').val(dcaMaxOrder);
		$('#dcaTakeProfitPercent').val(dcaTakeProfitPercent);

		openModal('#boxDealEdit', 'Deal ID ' + dealId, '', '#modalDealEdit');
  	}


	function panicSellConfirm(dealId) {

		let randNum = Math.floor(1000 + Math.random() * 9000);

		$.confirm({

					title: false,
					boxWidth: '50%',
					useBootstrap: false,
					content: '<div style="font-size: 1.2rem; text-align: left;">Close deal ' + dealId + ' at current market price?<br><br>' +
						'Type <b>' + randNum + '</b> in the box to confirm close deal: ' +
						'<form action="" style="display: inline;"><input type="text" id="confirmNum" class="form-field" onkeypress="if (event.which < 48 || event.which > 57) if (event.which != 8) return false;" required /></form></div>',
					buttons: {
								formSubmit: {
												btnClass: 'btn-default',
												text: '<div style="color: #d80f08;">Close Deal</div>',
												action: function () {

													let confirmNum = this.$content.find('#confirmNum').val();
													
													if (!confirmNum || confirmNum != randNum) {

														alertBox('Confirmation number incorrect');
														return false;
													}
													
													panicSell(dealId);
												}
											},
							 	cancel: {

									 		btnClass: 'btn-default',
									 		text: '<div style="color: #000000;">Cancel</div>',	
										 	action: function () { }
									 	}
							 },
							 onContentReady: function () {

							 	let jc = this;

							 	this.$content.find('form').on('submit', function (e) {

							 		e.preventDefault();
							 		jc.$$formSubmit.trigger('click');
								});
							}
		});
	}


	function stopBotConfirm(botName, selector, data) {

		clearTimeout(timeOutId);

		$.confirm({

					title: false,
					boxWidth: '50%',
					useBootstrap: false,
					content: '<div style="font-size: 1.2rem; text-align: left;">Disable ' + botName + '? Current deals will continue running until they complete.</div>',
					buttons: {

								ok: {
										btnClass: 'btn-default',
										text: '<div style="color: #d80f08;">Disable Bot</div>',
										action: function () {

											stopBot(selector, data);
										}
									 },
							 	cancel: {

									 		btnClass: 'btn-default',
									 		text: '<div style="color: #000000;">Cancel</div>',	
										 	action: function () { setReloadTimeout(); }
									 	}
							 }
		});
	}


	function getActiveDeals() {

		//$('#spinner-overlay').fadeIn(100);

		$.ajax({
					type: 'GET',
					url: '/api/deals',
					data: {},
					dataType: 'json',
					success: function(data) {

						//$('#spinner-overlay').fadeOut(100);

						let date = data.date;
						let deals = data.data;

						populateDeals(date, deals);

						setReloadTimeout();
					},
					error: function(data) {

						// Some error in ajax call
						//$('#spinner-overlay').fadeOut(100);

						alertBox('Error: ' + JSON.stringify(data), function() { setReloadTimeout(); });
					}
		});
	}


	function panicSell(dealId) {

		$('#spinner-overlay').fadeIn(100);

		$.ajax({
					type: 'POST',
					url: '/api/deals/' + dealId + '/panic_sell',
					data: {},
					dataType: 'json',
					success: function(data) {

						$('#spinner-overlay').fadeOut(100);

						if (!data.success) {

							alertBox('Unable to close deal: ' + data['data']);
						}
						else {

							alertBox('Deal ID ' + dealId + ' closed');
						}
					},
					error: function(data) {

						// Some error in ajax call
						$('#spinner-overlay').fadeOut(100);

						alertBox('Error: ' + JSON.stringify(data));
					}
		});
	}


	function dealUpdate(dealId, data) {

		$('#spinner-overlay').fadeIn(100);

		$.ajax({
					type: 'POST',
					url: '/api/deals/' + dealId + '/update_deal',
					data: data,
					dataType: 'json',
					success: function(data) {

						$('#spinner-overlay').fadeOut(100);

						if (!data.success) {

							alertBox('Unable to update deal: ' + data['data'], function() { });
						}
						else {

							alertBox('Deal ID ' + dealId + ' updated', function() { });
						}
					},
					error: function(data) {

						// Some error in ajax call
						$('#spinner-overlay').fadeOut(100);

						alertBox('Error: ' + JSON.stringify(data), function() { });
					}
		});
	}


	function stopBot(selector, data) {

		let botId = data.bot_id;

		$('#spinner-overlay').fadeIn(100);

		$.ajax({
					type: 'POST',
					url: '/api/bots/' + botId + '/disable',
					data: data,
					dataType: 'json',
					success: function(data) {

						$('#spinner-overlay').fadeOut(100);

						if (!data.success) {

							alertBox('Unable to disable bot', function() { setReloadTimeout(); });
						}
						else {

							$('[id*="stop' + botId + '"]').text('');
							//selector.text('');

							alertBox('Bot Disabled', function() { setReloadTimeout(); });
						}
					},
					error: function(data) {

						// Some error in ajax call
						$('#spinner-overlay').fadeOut(100);

						alertBox('Error: ' + JSON.stringify(data), function() { setReloadTimeout(); });
					}
		});
	}


	function showTradingView(pair, exchange) {

		let randNum = Math.floor(1000 + Math.random() * 90000);

		tradingViewData['id'] = 'tv' + randNum;
		tradingViewData['pair'] = exchange.toUpperCase() + ':' + pair.replace(/[^a-z0-9]/gi, '');

		openModal('#modal', 'TradingView Chart ' + pair, 'Loading...');

		$('#modal').load('/tradingview');
	}


	function showOrderHistory(dealId) {

		if (dealTracker[dealId] == undefined || dealTracker[dealId] == null) {

			return;
		}

		let count = 1;

		let orders = JSON.parse(JSON.stringify(dealTracker[dealId]['orders'])).reverse();

		let table = $('<table id="ordersTable" style="width: 100%;" cellspacing=0 cellpadding=0>');

		let row = $('<tr />');
		row.append($('<th></th> <th>Date</th> <th>Price</th> <th>Qty</th> <th>Amount</th> <th>Sum(Qty)</th> <th>Sum($)</th>'));
		table.append(row);

		for (let i = 0; i < orders.length; i++) {

			let data = orders[i];

			if (data['filled'] != 0) {

				let row = $('<tr />');

				row.append($('<td style="padding: 3px;">' + count + '.</td>'));
				row.append($('<td>' + dateConvertLocal(data['dateFilled']) + '</td>'));
				row.append($('<td>$' + data['price'] + '</td>'));
				row.append($('<td>' + data['qty'] + '</td>'));
				row.append($('<td>$' + data['amount'] + '</td>'));
				row.append($('<td>' + data['qtySum'] + '</td>'));
				row.append($('<td>$' + data['sum'] + '</td>'));

				table.append(row);

				count++;
			}
		}

		openModal('#modal', 'Order History ' + dealId, table);
	}


	function populateDeals(date, deals) {

		const maxMins = 2;

		let totalProfit = 0;
		let inDeals = 0;

		let msgBoxColor = '#386ec2';
		let profitTotalColor = '#1a9f00';

		let contentArr = [];
		let dealsErrorArr = [];

		dealTracker = {};

		for (let i = 0; i < deals.length; i++) {

			//let stopButton = '<span class="disableButton">&#x026AB;</span>';
			let editButton = '<span class="disableButton">&#9998;</span>';
			let stopButton = '<span class="disableButton">&#9726;</span>';
			let panicButton = '<span class="disableButton" style="font-size: 1.0rem;">&#128176</span>';

			let dealVolume = deals[i].orders.filter(order => order.filled === 1).reduce((acc, order) => acc + Number(order.amount), 0);
			inDeals += dealVolume;

			let profitPercColor = '#1a9f00';

			let dealCount;

			const deal = deals[i];

			const config = deal['config'];
			const dealId = deal['dealId'];
			const lastUpdated = deal['info']['updated'];
			const botActive = deal['info']['bot_active'];
			const profit = deal['info']['profit'];
			const profitPerc = deal['info']['profit_percentage'];

			const duration = timeDiff(new Date(), new Date(deal['date']));

			if (!botActive) {

				stopButton = '';
			}

			if (profitPerc <= 0) {

				profitPercColor = '#d82715';
			}

			if (deal['info']['deal_max'] == 0) {

				deal['info']['deal_max'] = '&#8734;';
			}

			if (isNaN(deal['info']['deal_count'])) {

				continue;
			}
			else {

				dealCount = deal['info']['deal_count'] + ' / ' + deal['info']['deal_max'];
			}

			let diffSec = (new Date(date).getTime() - new Date(lastUpdated).getTime()) / 1000;

			if (diffSec > (60 * maxMins)) {

				diffSec = (diffSec / 60).toFixed(2);

				dealsErrorArr.push(dealId);
			}

			totalProfit += profit;

			dealTracker[dealId] = {};

			dealTracker[dealId]['info'] = deal['info'];
			dealTracker[dealId]['config'] = config;
			dealTracker[dealId]['orders'] = deal['orders'];

			contentArr.push('<tr data-dealid="' + dealId + '">');
			contentArr.push('<td>' + deal['info']['bot_name'] + '</td>');
			contentArr.push('<td>' + dealId + '</td>');
			contentArr.push('<td>' + deal['pair'] + '</td>');
			contentArr.push('<td>' + duration + '</td>');		
			contentArr.push('<td>$' + deal['info']['price_last'] + '</td>');
			contentArr.push('<td>$' + deal['info']['price_target'] + '</td>');
			contentArr.push('<td>$' + dealVolume.toFixed(2) + '</td>')
			contentArr.push('<td style="color: ' + profitPercColor+ '">$' + profit + '</td>');
			contentArr.push('<td style="color: ' + profitPercColor+ '">' + profitPerc + '%</td>');
			contentArr.push('<td>' + config['dcaTakeProfitPercent'] + '%</td>');
			contentArr.push('<td>' + deal['info']['safety_orders_used'] + ' / ' + deal['info']['safety_orders_max'] + '</td>');
			contentArr.push('<td>' + dealCount + '</td>');
			contentArr.push('<td style="text-align: center;"><div id="edit' + dealId + i + '">' + editButton + '</div></td>');
			contentArr.push('<td style="text-align: center;"><div id="panic' + dealId + i + '">' + panicButton + '</div></td>');
			contentArr.push('<td data-botid="' + deal['info']['bot_id'] + '" data-botname="' + deal['info']['bot_name'] + '" style="text-align: center;"><div id="stop' + deal['info']['bot_id'] + i + '">' + stopButton + '</div></td>');
			contentArr.push('</tr>');
		}

		if (totalProfit <= 0) {

			profitTotalColor = '#d82715';
		}

		$('#msgBox').empty();
		$('#botsDeals tbody').empty();

		if (dealsErrorArr.length > 0) {

			let msg = '<b>WARNING:</b> ' + dealsErrorArr.length + ' deals exceed last updated time of ' + maxMins + ' minutes. Check logs for more details.';

			$('#msgBox').css('color', msgBoxColor);
			$('#msgBox').html(msg);
		}

		$('#botsDeals tbody').append(contentArr.join(''));

		$('#totalProfit').css('color', profitTotalColor);
		$('#totalProfit').html('$' + totalProfit.toFixed(2));

		$('#inDeals').html('$' + inDeals.toFixed(2));
		$('#totalDeals').html(deals.length);
		
		$('#botsDeals').tablesorter().trigger('update');

		resizeBotsDeals();
	}


	$(document).ready(function() {
 
		$(window).resize(function() {

			resizeBotsDeals();
		});


		$('#formSubmitEdit').on('click', function(e) {

			e.preventDefault();

			const dealId = $('#dealEditId').val();
			const dcaMaxOrder = $('#dcaMaxOrder').val();
			const dcaTakeProfitPercent = $('#dcaTakeProfitPercent').val();

			let dataObj = {
							'dcaMaxOrder': dcaMaxOrder,
							'dcaTakeProfitPercent': dcaTakeProfitPercent
						  };

			modalId.dialog('close');

			dealUpdate(dealId, dataObj);
		});


		$(document).on('keypress', '#botsCreate input', function(e) {

			const id = $(this).attr('id');
			const val = $('#' + id).val();

			const charCode = (e.which) ? e.which : e.keyCode;

			if (id == undefined || id == null) {

				return;
			}

			let regEx = /[^0-9\.]/g;

			if (id.toLowerCase() == 'dcamaxorder') {

				regEx = /[^0-9]/g;
			}

			if (charCode == 46 && (val.split('.').length - 1) > 0) {

				return false;
			}

			if (String.fromCharCode(charCode).match(regEx)) { return false; }
		});


		$('#botsDeals').tablesorter({

			widgets: [ 'saveSort', 'stickyHeaders', 'uitheme' ],
			widgetOptions: {
				saveSort: true,
				stickyHeaders_attachTo: '',
				columnSelector_mediaqueryHidden: true
			},
			durationLength : 4,
			durationLabels : '(?:years|year|y),(?:days|day|d),(?:hours|hour|h),(?:minutes|minute|min|m),(?:seconds|second|sec|s)',
			textExtraction: {

				8: function(node) {

					if (node.innerHTML.indexOf('%') != -1) {

						let val = stripHtml(node.innerHTML);
						return val.replace('%', '');
					}

					return node.innerHTML;
				},
				9: function(node) {

					if (node.innerHTML.indexOf('%') != -1) {

						let val = stripHtml(node.innerHTML);
						return val.replace('%', '');
					}

					return node.innerHTML;
				}
			},
			headers: {

				// Set "sorter : false" (no quotes) to disable the column
				3: {
					sorter: "duration"
				},
				4: {
					sorter: "currency"
				},
				5: {
					sorter: "currency"
				},
				6: {
					sorter: "currency"
				},
				7: {
					sorter: "currency"
				}
			}
		});


		$(document).on('click', '#botsDeals tbody tr td', function() {

			let col = $(this).index();
			let row = $(this).closest('tr');
			let content = $(this).text();

			let colCount = $(row).find('td').length;

			if (col == 2) {

				let pair = content;
				let dealId = row.data('dealid');
				let exchange = dealTracker[dealId]['config']['exchange'].toUpperCase();

				if (exchange.startsWith('COINBASE')) {

					exchange = 'COINBASE';
				}

				showTradingView(pair, exchange);
			}
			else if (col == (colCount - 1) && content != '') {

				// Stop bot
				let data = { 'bot_id': '' };

				let botId = $(this).data('botid');
				let botName = $(this).data('botname');

				if (botId) {

					data.bot_id = botId;

					stopBotConfirm(botName, $(this), data);
				}
			}
			else if (col == (colCount - 2)) {

				// Panic sell
				let dealId = row.data('dealid');

				if (dealId) {

					panicSellConfirm(dealId);
				}
			}
			else if (col == (colCount - 3)) {

				// Edit deal
				let data = { 'deal_id': '' };

				let dealId = row.data('dealid');

				if (dealId) {

					data.deal_id = dealId;

					dealEdit(dealId);
				}
			}
			else {

				let dealId = row.data('dealid');

				showOrderHistory(dealId);
			}
		});

		getActiveDeals();

	});


</script>

<center>
<main>

	<div id="modal"></div>
	<div id="modalDealEdit"></div>

	<div id="contentBox">

		<div style="position: relative;">

			<div class="contentHeaderBox">

				<b class="contentHeader">Active DCA Bot Deals</b>

				<span style="display: flex; font-size: 1.2rem; justify-content: center; gap: 20px; margin-top: 10px;">
					<p style="margin-top: 0; margin-bottom: 0;">Active P/L: <span id="totalProfit"></span></p>
					<p style="margin-top: 0; margin-bottom: 0;">In Deals: <span id="inDeals"></span></p>
					<p style="margin-top: 0; margin-bottom: 0;">Deals: <span id="totalDeals"></span></p>
				</span>
			</div>

			<span id="msgBox" style="position: relative; display: flex; justify-content: center;"></span>

			<div class="botsDealsBox">

				<table id="botsDeals" border=0 cellspacing=0 cellpadding=0>

				<thead style="position: sticky; top: 0; z-index: 1000;">
					<tr style="font-weight: bold; text-align: left; white-space: nowrap;">
						<th>Bot Name</th> <th>Deal ID</th> <th>Pair</th> <th>Duration</th> <th>Price</th> <th>Price Target</th> <th>Volume</th> <th>Profit</th> <th>Profit %</th> <th>TP</th> <th>Safety Orders</th> <th>Deals</th> <th colspan=3 data-sorter="false"></th> 
					</tr>
				</thead>

				<tbody></tbody>

				</table>
			</div>
		</div>


		<div id="boxDealEdit" style="display: none; margin: 0 auto;">

			<table id="botsCreate" style="margin-top: 20px; max-width: 225px;" cellpadding=0 cellspacing=0>

			<form id="formDealEdit" autocomplete="off" action="">

				<input id="dealEditId" name="dealEditId" type=hidden>

				<tr><td>Target Profit %:</td> <td><input id="dcaTakeProfitPercent" name="dcaTakeProfitPercent" class="form-field"></td></tr>
				<tr><td>Max Safety Orders:</td> <td><input id="dcaMaxOrder" name="dcaMaxOrder" class="form-field"></td></tr>

				<tr><td colspan=2 style="padding-top: 20px;"><button id="formSubmitEdit" class="btn">Update Deal</button></td></tr>
			</form>

			</table>
		</div>

	</div>

</main>
</center>

<%- include('../../partialsFooterView'); %>
