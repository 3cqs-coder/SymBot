<%- include('../../partialsHeaderView'); %>

<script>

	let timerId;
	let confirmWaiting = false;

	function showActive(active) {

		$('#botsDeals tr').show();

		$('[id*="toggle"]').each(function() {

			let id = $(this).attr('id');
			let row = $(this).closest('tr');

			let botId = $(row).data('botid');

			if (active) {

				if (!$('#toggle' + botId).prop('checked')) {

					$(row).hide();
				}
			}
		});
	}


	function toggleBot(api, status) {

		$('#spinner-overlay').fadeIn(100);

		$.ajax({
					type: 'POST',
					url: '/api/bots/' + api,
					data: {},
					dataType: 'json',
					success: function(data) {

						$('#spinner-overlay').fadeOut(100);

						if (!data.success) {

							alertBox('Unable to change bot status');
						}
						else {

							alertBox('Bot is now ' + status);
						}
					},
					error: function(data) {

						// Some error in ajax call
						$('#spinner-overlay').fadeOut(100);

						alertBox('Error: ' + JSON.stringify(data));
					}
		});
	}


	function confirmBot(api, data, botId, botName) {

		let botText;

		if (api.match(/enable/i)) {
				
			botText = 'Enable';
		}
		else {
				
			botText = 'Disable';
		}

		if (!confirmWaiting) {

			confirmWaiting = true;

			$.confirm({
						title: false,
						boxWidth: '50%',
						useBootstrap: false,
						content: '<div style="font-size: 1.2rem; text-align: left;">' + botText + ' ' + botName + '?</div>',
						buttons: {

									ok: {
											btnClass: 'btn-default',
											text: '<div style="color: #4aa602;">' + botText + ' Bot</div>',
											action: function () {

												$('#toggle' + botId).prop('disabled', false);
												$('#toggle' + botId).click();
											
												setTimeout( function() {
																			confirmWaiting = false;
																			$('#toggle' + botId).prop('disabled', true);

																	   }, 500);

												toggleBot(api, data);
											}
										},
										cancel: {

									 		btnClass: 'btn-default',
									 		text: '<div style="color: #000000;">Cancel</div>',	
									 		action: function () {

									 			setTimeout( function() {
																			confirmWaiting = false;

																	   }, 500);
											}
										}
								 }
			});
		}
	}
	

	$(document).ready(function() {

		$(window).resize(function() {

			resizeBotsDeals();
		});


		$('[id="showActive"]').simpleSwitch();
		$('[id*="toggle"]').simpleSwitch();
		$('[id*="toggle"]').prop('disabled', true);


		$('#showActive').click(function() {

			let active = false;

			if ($(this).prop('checked')) {

				active = true;
			}

			dataTracker['show_active'] = active;

			updateDataTracker();

			showActive(active);
		});


		$('#botsDeals tbody tr td').click(function() {

			let col = $(this).index();
			let row = $(this).closest('tr');
			let content = $(this).text();

			let colCount = $(row).find('td').length;

			let botId = $(row).data('botid');
			let botName = $(row).data('botname');

			if (col == (colCount - 1)) {

				// Set timeout to avoid double event firing in some cases
				clearTimeout(timerId);

				timerId = setTimeout( function(){

					if ($('#toggle' + botId).prop('checked')) {

						confirmBot(botId + '/disable', 'disabled', botId, botName);
					}
					else {

						confirmBot(botId + '/enable', 'enabled', botId, botName);
					}

				}, 150);
			}
			else if (botId) {

				window.location.href = '/bots/' + botId;
			}
		});


		$('#botsDeals').tablesorter({

			widgets: [ 'saveSort', 'stickyHeaders', 'uitheme' ],
			widgetOptions: {
				saveSort: true,
				stickyHeaders_attachTo: '',
				columnSelector_mediaqueryHidden: true
			},
			durationLength : 4,
			durationLabels : '(?:years|year|y),(?:days|day|d),(?:hours|hour|h),(?:minutes|minute|min|m),(?:seconds|second|sec|s)'
		});


		// Check last active state
		if (dataTracker['show_active']) {

			$('#showActive').click();
		}

		resizeBotsDeals();
	});

</script>


<center>
<main>

	<div id="contentBox">

		<div style="position: relative;">

			<div class="contentHeaderBox">
				<b id="headerText" class="contentHeader">DCA Bots</b>

				<span style="display: flex; justify-content: center; font-size: 1.2rem; gap: 10px; margin-top: 10px; margin-bottom: 0;">
					<input id="showActive" name="showActive" type=checkbox> Show Active
				</span>
			</div>

			<div class="botsDealsBox" style="margin-top: 20px;">

				<table id="botsDeals" border=0 cellspacing=0 cellpadding=0>

					<thead style="position: sticky; top: 0; z-index: 1000;">
						<tr class="tableHeader">
							<th>Bot Name</th> <th>Pair</th> <th>BO</th> <th>SO</th> <th>Max SO</th> <th>Deviation</th> <th>Volume Scale</th> <th>Step Scale</th> <th>TP %</th> <th>Max Deals</th> <th>Start</th> <th>Sandbox</th> <th>Active</th>
						</tr>
					</thead>

					<tbody>
	<%

		const maxPairs = 10;

		for (let i = 0; i < bots.length; i++) {

			let pair;
			let startCondition = 'asap';

			let bot = bots[i];

			let active = bot['active'];
			let dealMax = bot['config']['dealMax'];
			let sandBox = bot['config']['sandBox'];

			if (bot['config']['startConditions'] != undefined && bot['config']['startConditions'] != null && bot['config']['startConditions'] != '') {

				startCondition = bot['config']['startConditions'][0];
			}

			if (startCondition.indexOf('|') !== -1) {

				const data = startCondition.split('|');

				const signalSource = data[1];
				const signalId = data[2];

				startCondition = appData['bots']['start_conditions'][startCondition]['description'];
			}
			else {

				startCondition = startCondition.toUpperCase();
			}

			if (active) {
				
				active = 'checked';
			}
			else {

				active = '';
			}

			if (sandBox) {
				
				sandBox = 'Yes';
			}
			else {

				sandBox = 'No';
			}

			if (dealMax == 0) {

				dealMax = '&#8734;';
			}
			
			if (typeof bot['config']['pair'] !== 'string') {

				let pairs = bot['config']['pair'].slice(0, maxPairs);

				pair = pairs.join(', ');
				
				if (bot['config']['pair'].length > maxPairs) {

					pair += ' ...';
				}
			}
			else {

				pair = bot['config']['pair'];
			}
	%>

					<tr data-botid="<%- bot['botId'] %>" data-botname="<%- bot['botName'] %>" style="vertical-align: top;">
						<td><%- bot['botName'] %></td>
						<td style="max-width: 150px;"><%- pair.toUpperCase() %></td>
						<td><%- bot['config']['firstOrderAmount'] %></td>
						<td><%- bot['config']['dcaOrderAmount'] %></td>
						<td><%- bot['config']['dcaMaxOrder'] %></td>
						<td><%- bot['config']['dcaOrderStepPercent'] %></td>
						<td><%- bot['config']['dcaOrderSizeMultiplier'] %></td>
						<td><%- bot['config']['dcaOrderStepPercentMultiplier'] %></td>
						<td><%- bot['config']['dcaTakeProfitPercent'] %></td>
						<td><%- dealMax %></td>
						<td><%- startCondition %></td>
						<td><%- sandBox %></td>
						<td><input id="toggle<%- bot['botId'] %>" type=checkbox <%- active %>></td>
					</tr>

	<% 	} %>

					</tbody>
				</table>
			</div>
		</div>
	</div>

</main>
</center>

<%- include('../../partialsFooterView'); %>
