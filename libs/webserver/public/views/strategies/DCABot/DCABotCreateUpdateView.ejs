<%- include('../../partialsHeaderView'); %>

<script>

	let isUpdate = false;
	let confirmStart = false;

	let formAction = '<%- formAction %>';


	function formToJson(form) {

		let obj = {};

		$(form).serializeArray().map(function(item) {

			if (obj[item.name]) {

				if (typeof(obj[item.name]) === 'string') {

					obj[item.name] = [obj[item.name]];
				}

				obj[item.name].push(item.value);
			}
			else {

				obj[item.name] = item.value;
			}
		});

		return obj;
	}


	function resetForm(form) {

		$('#spinner-overlay').fadeOut(100);

		$('#formSubmitPreview').show();
		$('#formSubmitReset').hide();
		$('#formSubmitStart').hide();
		$('#ordersBox').hide();

		disableAll(false);
	}


	function showStartConditionsSub(val) {

		const data = val.split('|');

		if (data[0] == 'signal') {

			const key = data[1];

			$('[id^="startConditionSub-' + key + '"]').show();
		}
		else {

			$('[id^="startConditionSub"]').hide();
		}
	}
	

	function disableAll(disable) {

		$('input,select').not('[type=button]').prop('disabled', disable);

		$('[id^="selectAll"]').prop('disabled', disable);
		$('[id^="clearAll"]').prop('disabled', disable);
	}


	function clearAll() {

		$('#pair option').each(function(){

			this.selected = false;
		});

		$('#pair').trigger('change');
	}


	function selectAll(quote) {

		let allPairs = [];

		clearAll();

		//let selected = $('#pair :selected').map((_, e) => e.value).get();

		let options = $("#pair option").map(function() {

					return this.value;
		}).get();

		for (let i = 0; i < options.length; i++) {

			let optionVal = options[i];

			let pairs = optionVal.split('/');

			if (pairs[1].toUpperCase() == quote.toUpperCase()) {

				allPairs.push(optionVal);
				//$('#pair option[value="' + optionVal + '"]').attr('selected', true);
			}
		}

		$('#pair').val(allPairs);
		$('#pair').trigger('change');
	}


	$(document).ready(function () {

		let botText = 'Create Bot';
		let headerText = 'Create DCA Bot';

		// Set names depending on create or update bot
		if (formAction.indexOf('update') > -1) {

			isUpdate = true;

			botText = 'Update Bot';
			headerText = 'Update DCA Bot';

			$('#botIdRow').show();
		}

		$('#headerText').text(headerText);
		$('#formSubmitStart').text(botText);

		showStartConditionsSub($('#startCondition').val());

		$('#pair').select2();
		$('[id*="botActive"]').simpleSwitch();

		const form = '#formBotsCreate';
		const submitUrl = $(form).attr('action');

		const createStep = $('#createStep').val();


		$('#startCondition').on('change', function() { 

			const val = this.value;

			showStartConditionsSub(val);
		});


		$('#clearAll').on('click', function(e) {

			e.preventDefault();
			
			clearAll();
		});


		$('[id^="selectAll"]').on('click', function(e) {

			e.preventDefault();

			const id = $(this).attr('id');
			
			const data = id.split('-');

			const quote = data[1];

			selectAll(quote);
		});


		$('[id^="formSubmit"]').on('click', function(e) {

			e.preventDefault();

			let invalidPair = false;

			const id = $(this).attr('id');

			if (id.match(/reset/i)) {

				resetForm(form);
				return;
			}

			if (id.match(/start/i) && !confirmStart) {

				$.confirm({
							title: false,
							boxWidth: '50%',
							useBootstrap: false,
							content: '<div style="font-size: 1.2rem; text-align: left;">' + botText + '?</div>',
							buttons: {

										ok: {

											btnClass: 'btn-default',
											text: '<div style="color: #4aa602;">' + botText + '</div>',
											action: function () {

												confirmStart = true;
											
												$('#createStep').val('start');
												$('#formSubmitStart').click();
										}
									 },
									 	cancel: {

									 		btnClass: 'btn-default',
										 	text: '<div style="color: #000000;">Cancel</div>',	
										 	action: function () { }
									 	}
									 }
				});

				return;
			}

			confirmStart = false;

			$('#formSubmitReset').hide();
			$('#formSubmitStart').hide();
			$('#ordersBox').hide();

			// Enable form so data is retrievable
			disableAll(false);

			$('#active').val($('#botActive').prop('checked'));

			let formDataSubmit = $(form).serialize();
			const formData = formToJson(form);

			if (formData.pair != undefined && formData.pair != null && formData.pair != '') {

				if (typeof formData.pair == 'string' && !formData.pair.match(/\//)) {

					invalidPair = true;
				}

				if (typeof formData.pair != 'string' && !formData.pair[0].match(/\//)) {

					invalidPair = true;
				}
			}
			else {

				invalidPair = true;
			}
 
			if (invalidPair) {

				alertBox('Invalid Pair');

				return;
			}

			if (formData.startCondition[0] == undefined || formData.startCondition[0] == null || formData.startCondition[0] == '') {

				alertBox('Invalid Start Condition');

				return;
			}

			$('[id^="startConditionSub"]').each(function(){

				const id = this.id;

				const data = id.split('-');

				const key = data[1];
				const num = data[2];

				const val = $('#startConditionVal-' + key + '-' + num).val();
				const operator = $('#startConditionOp-' + key + '-' + num).val();

				if (operator != undefined && operator != null && operator != '') {

					let content = 'signalsub|' + key + '|';

					content += $(this).data('id') + '|';
					content += operator + '|';
					content += val + '|';

					formDataSubmit += '&startCondition=' + content;
				}
			});

			$('#spinner-overlay').fadeIn(100);

			$('#formSubmitPreview').hide();

			disableAll(true);

			$.ajax({
						type: 'POST',
						url: submitUrl,
						data: formDataSubmit,
						dataType: 'json',
						success: function(data) {

						if (!data.success) {

							$('#spinner-overlay').fadeOut(100);

							$('#formSubmitPreview').show();

							disableAll(false);
			
							//alertBox(JSON.stringify(data));
							alertBox(data.data);
						}
						else {

							const orders = data.data.orders;
							const content = data.data.content;

							let table = $('<table id="ordersTable" cellspacing=0 cellpadding=0>');

							let tableData = orders.steps;

							tableData.unshift(orders.headers);

							for (let i = 0; i < tableData.length; i++) {

								let cols = tableData[i];

								let row = $('<tr/>');

								let tag = 'td';
								
								if (i == 0) {
									
									tag = 'th';
								}

								for (let x = 0; x < cols.length; x++) {

									let col = cols[x];

									row.append($('<' + tag + '>' + col + '</' + tag + '>'));
								}

								table.append(row);
							}

							let contentAdd = '<br>';

							if (content.balance < content.max_funds) {

								contentAdd += '<b style="color: red;">Your current balance does not have enough funds for all DCA orders</b><br><br>';
							}

							contentAdd += '<b>Current Balance</b>: $' + content.balance + '<br>\n';
							contentAdd += '<b>Max. Funds</b>: $' + content.max_funds + '<br>\n';
							contentAdd += '<b>Max. Deviation</b>: ' + content.max_deviation_percent + '%<br>\n';

							$('#ordersBox').html(table);
							$('#ordersBox').append(contentAdd);

							if (data.step.toLowerCase() != 'getorders') {

								resetForm(form);

								if (!isUpdate) {

									alertBox('Bot Created');
								}
								else {

									alertBox('Bot Updated');
								}
							}
							else {

								$('#spinner-overlay').fadeOut(100);

								disableAll(true);

								$('#ordersBox').show();
								$('#formSubmitReset').show();
								$('#formSubmitStart').show();

								if (content.balance_error != undefined && content.balance_error != null && content.balance_error != '') {

									$('#formSubmitStart').hide();

									alertBox('<b>ERROR:</b> ' + content.balance_error);
								}
								else {

									alertBox('Verify orders and confirm to ' + botText);
								}
							}
						}
					},
					error: function(data) {

						// Some error in ajax call
						$('#spinner-overlay').fadeOut(100);

						$('#formSubmitStart').hide();
						alertBox('Error: ' + JSON.stringify(data));
				}
			});

			// Reset value
			$('#createStep').val(createStep);
		});
	});


	$(document).on('keypress', '#botsCreate input', function(e) {

		const id = $(this).attr('id');
		const val = $('#' + id).val();

		const charCode = (e.which) ? e.which : e.keyCode;

		if (id == undefined || id == null) {

			return;
		}

		if (id.toLowerCase() != 'pair' && id.toLowerCase() != 'botname') {

			let regEx = /[^0-9\.]/g;

			if (id.toLowerCase() == 'dealmax' || id.toLowerCase() == 'pairmax') {

				regEx = /[^0-9]/g;
			}

			if (charCode == 46 && (val.split('.').length - 1) > 0) {

				return false;
			}

			if (String.fromCharCode(charCode).match(regEx)) { return false; }
		}
	});

</script>

		<%
			const operatorsArr = [ '<', '>', '=', '!=', '>=', '<=' ];

			let symbolString = '';
			let activeChecked = '';

			let startConditionString = '<option value="">';
			let startConditionSubString = '';

			let countSub = 1;

			let pairsObj = {};
			let startConditionSubObj = {};
			let botPairs = [];

			if (botData.active) {

				activeChecked = 'checked';
			}

			if (typeof botData.pair !== 'string') {

				botPairs = botData.pair;
			}
			else {

				botPairs.push(botData.pair);
			}

			for (let pair of botPairs) {

				pair = pair.toUpperCase();
				pairsObj[pair] = 1;
 			}

			for (let i = 0; i < symbols.length; i++) {

				let selected = '';

				let pair = symbols[i].toUpperCase();

				if (pairsObj[pair] != undefined && pairsObj[pair] != null) {

					selected = ' selected';
				}
				
				symbolString += '<option value="' + pair + '" ' + selected + '>' + pair;
			}

			for (let key in appData.bots['start_conditions']) {

				let selected = '';

				let description = appData.bots['start_conditions'][key]['description'];

				if (botData.startConditions != undefined && botData.startConditions != null && botData.startConditions != '') {

					if (key == botData.startConditions[0]) {

						selected = ' selected';
					}
				}

				startConditionString += '<option value="' + key + '" ' + selected + '>' + description;
			}

			// Get additional bot start conditions
			if (botData.startConditions != undefined && botData.startConditions != null && botData.startConditions.length > 1) {

				for (let i = 1; i < botData.startConditions.length; i++) {

					const data = botData.startConditions[i].split('|');

					const key =  data[1];
					const id = data[2];
					const operator = data[3];
					const content = data[4];

					if (startConditionSubObj[key] == undefined || startConditionSubObj[key] == null) {

						startConditionSubObj[key] = {};
					}
				
					startConditionSubObj[key][id] = { 'operator': operator, 'content': content };
				}
			}

			for (let keySub in appData.bots['start_conditions_sub']) {

				const data = keySub.split('|');

				const key = data[1];
				const id = data[2];

				let content = '';
				let operator = '';

				if (startConditionSubObj[key] != undefined && startConditionSubObj[key] != null) {

					if (startConditionSubObj[key][id] != undefined && startConditionSubObj[key][id] != null) {

						content = startConditionSubObj[key][id]['content'];
						operator = startConditionSubObj[key][id]['operator'];
					}
				}

				const description = appData.bots['start_conditions_sub'][keySub]['description'];

				let str = '<tr id="startConditionSub-' + key + '-' + countSub + '"';

				str += ' data-id="' + id + '" ';
				str += ' style="display: none;"><td style="padding-left: 15px;">' + description + ':</td> <td>';

				str += '<select id="startConditionOp-' + key + '-' + countSub + '" name="startConditionOp" class="form-field">';
				str += '<option value="">';

				for (let i = 0; i < operatorsArr.length; i++) {

					let selected = '';

					let op = operatorsArr[i];

					if (op == operator) {

						selected = ' selected';
					}

					str += '<option value="' + op + '"' + selected + '>' + op;
				}

				str += '</select>';

				str += ' <input id="startConditionVal-' + key + '-' + countSub + '" name="startCondition' + countSub + '" class="form-field" style="cursor: auto;" value="' + content + '">';
				str += '</td></tr>';

				startConditionSubString += str;

				countSub++;
			}
		%>

<center>
<main>

	<div id="contentBox" style="width: 90%;">

		<div class="contentHeaderBox">
			<b id="headerText" class="contentHeader"></b>
		</div>

		<div class="botsDealsBox">

			<table id="botsCreate" style="margin-top: 20px;" cellpadding=0 cellspacing=0>

				<form id="formBotsCreate" autocomplete="off" action="<%- formAction %>">

				<input type=hidden id="createStep" name="createStep" value="getorders">
				<input type=hidden id="botId" name="botId" value="<%- botData.botId %>">
				<input type=hidden id="active" name="active">

				<tr id="botIdRow" style="display: none;"><td>Bot ID:</td> <td><%- botData.botId %></td></tr>
				<tr><td>Bot Name:</td> <td><input id="botName" name="botName" value="<%- botData.botName %>" class="form-field" style="width: 200px;"></td></tr>
				<tr><td style="vertical-align: top;">Pair:</td>
		
				<td>

				<div style="position: relative;">

					<div style="position: relative; float: left;">
						<select id="pair" name="pair" class="form-select-pair" style="width: 200px;" multiple="multiple"><%- symbolString %></select>
					</div>

					<div style="position: relative; float: left; left: 5px;">
						<button id="clearAll" class="btnAll">Clear</button>
					</div>

					<br>

					<div style="position: relative; float: left; margin-top: 5px; margin-bottom: 5px;">
						<button id="selectAll-USD" class="btnAll">USD</button>
						<button id="selectAll-USDT" class="btnAll">USDT</button>
						<button id="selectAll-USDC" class="btnAll">USDC</button>
						<button id="selectAll-BUSD" class="btnAll">BUSD</button>
					</div>

				</div>

				</td></tr>
				<tr><td>Base Order Size:</td> <td><input id="firstOrderAmount" name="firstOrderAmount" value="<%- botData.firstOrderAmount %>" class="form-field"></td></tr>
				<tr><td>Safety Order Size:</td> <td><input id="dcaOrderAmount" name="dcaOrderAmount" value="<%- botData.dcaOrderAmount %>" class="form-field"></td></tr>
				<tr><td>Max Safety Orders:</td> <td><input id="dcaMaxOrder" name="dcaMaxOrder" value="<%- botData.dcaMaxOrder %>" class="form-field"></td></tr>
				<tr><td>Safety Order Price Deviation:</td> <td><input id="dcaOrderStepPercent" name="dcaOrderStepPercent" value="<%- botData.dcaOrderStepPercent %>" class="form-field"></td></tr>
				<tr><td>Safety Order Volume Scale:</td> <td><input id="dcaOrderSizeMultiplier" name="dcaOrderSizeMultiplier" value="<%- botData.dcaOrderSizeMultiplier %>" class="form-field"></td></tr>
				<tr><td>Safety Order Step Scale:</td> <td><input id="dcaOrderStepPercentMultiplier" name="dcaOrderStepPercentMultiplier" value="<%- botData.dcaOrderStepPercentMultiplier %>" class="form-field"></td></tr>
				<tr><td>Target Profit %:</td> <td><input id="dcaTakeProfitPercent" name="dcaTakeProfitPercent" value="<%- botData.dcaTakeProfitPercent %>" class="form-field"></td></tr>
				<tr><td>Max Deals:</td> <td><input id="dealMax" name="dealMax" value="<%- botData.dealMax %>" class="form-field"></td></tr>
				<tr><td>Max Pairs:</td> <td><input id="pairMax" name="pairMax" value="<%- botData.pairMax %>" class="form-field"></td></tr>
				<tr><td>Minimum 24h Volume:</td> <td><input id="volumeMin" name="volumeMin" value="<%- botData.volumeMin %>" class="form-field"> Million</td></tr>
				<tr id="startConditionFirst"><td>Start Condition:</td> <td><select id="startCondition" name="startCondition" class="form-field" style="width: 200px;"><%- startConditionString %></select></td></tr>
				<%- startConditionSubString %>
				<tr><td>Enabled:</td> <td><input id="botActive" name="botActive" type=checkbox class="form-field" <%- activeChecked %>></td></tr>

				<tr>
					<td style="padding-top: 25px; text-align: center;" colspan=2>

						<button id="formSubmitPreview" class="btn">Preview Bot</button>
						<button id="formSubmitReset" class="btn" style="display: none;">Modify Bot</button>
						&nbsp;&nbsp;&nbsp; <button id="formSubmitStart" class="btn" style="display: none;"></button>
					</td>
				</tr>

				</form>
			</table>
		</div>
	</div>

	<div id="ordersBox"></div>

</main>
</center>


<%- include('../../partialsFooterView'); %>
